[
  {
    "objectID": "Project-Netflix_movies.html",
    "href": "Project-Netflix_movies.html",
    "title": "Project: Investigating Netflix Movies",
    "section": "",
    "text": "The data",
    "crumbs": [
      "Project: Investigating Netflix Movies"
    ]
  },
  {
    "objectID": "Project-Netflix_movies.html#the-data",
    "href": "Project-Netflix_movies.html#the-data",
    "title": "Project: Investigating Netflix Movies",
    "section": "",
    "text": "netflix_data.csv\n\n\n\nColumn\nDescription\n\n\n\n\nshow_id\nThe ID of the show\n\n\ntype\nType of show\n\n\ntitle\nTitle of the show\n\n\ndirector\nDirector of the show\n\n\ncast\nCast of the show\n\n\ncountry\nCountry of origin\n\n\ndate_added\nDate added to Netflix\n\n\nrelease_year\nYear of Netflix release\n\n\nduration\nDuration of the show in minutes\n\n\ndescription\nDescription of the show\n\n\ngenre\nShow genre\n\n\n\n\n\nImporting pandas and matplotlib\n\n# Importing pandas and matplotlib\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Start coding!\n\n\n\nLoad the CSV file and store as netflix_df.\n\n#Load the CSV file and store as netflix_df.\nnetflix_df = pd.read_csv(\"datasets/netflix_data.csv\")\nnetflix_df.head(2)\n\n\n\n\n\n\n\n\n\nshow_id\ntype\ntitle\ndirector\ncast\ncountry\ndate_added\nrelease_year\nduration\ndescription\ngenre\n\n\n\n\n0\ns1\nTV Show\n3%\nNaN\nJoão Miguel, Bianca Comparato, Michel Gomes, R...\nBrazil\nAugust 14, 2020\n2020\n4\nIn a future where the elite inhabit an island ...\nInternational TV\n\n\n1\ns2\nMovie\n7:19\nJorge Michel Grau\nDemián Bichir, Héctor Bonilla, Oscar Serrano, ...\nMexico\nDecember 23, 2016\n2016\n93\nAfter a devastating earthquake hits Mexico Cit...\nDramas\n\n\n\n\n\n\n\n\n\n\nFilter the data to remove TV shows and store as netflix_subset\n\n#Filter the data to remove TV shows and store as netflix_subset\nnetflix_subset = netflix_df[netflix_df.type!='TV Show']\nnetflix_subset.head()\n\n\n\n\n\n\n\n\n\nshow_id\ntype\ntitle\ndirector\ncast\ncountry\ndate_added\nrelease_year\nduration\ndescription\ngenre\n\n\n\n\n1\ns2\nMovie\n7:19\nJorge Michel Grau\nDemián Bichir, Héctor Bonilla, Oscar Serrano, ...\nMexico\nDecember 23, 2016\n2016\n93\nAfter a devastating earthquake hits Mexico Cit...\nDramas\n\n\n2\ns3\nMovie\n23:59\nGilbert Chan\nTedd Chan, Stella Chung, Henley Hii, Lawrence ...\nSingapore\nDecember 20, 2018\n2011\n78\nWhen an army recruit is found dead, his fellow...\nHorror Movies\n\n\n3\ns4\nMovie\n9\nShane Acker\nElijah Wood, John C. Reilly, Jennifer Connelly...\nUnited States\nNovember 16, 2017\n2009\n80\nIn a postapocalyptic world, rag-doll robots hi...\nAction\n\n\n4\ns5\nMovie\n21\nRobert Luketic\nJim Sturgess, Kevin Spacey, Kate Bosworth, Aar...\nUnited States\nJanuary 1, 2020\n2008\n123\nA brilliant group of students become card-coun...\nDramas\n\n\n6\ns7\nMovie\n122\nYasir Al Yasiri\nAmina Khalil, Ahmed Dawood, Tarek Lotfy, Ahmed...\nEgypt\nJune 1, 2020\n2019\n95\nAfter an awful accident, a couple admitted to ...\nHorror Movies\n\n\n\n\n\n\n\n\n\n\nInvestigate the Netflix movie data, keeping only the columns “title”, “country”, “genre”, “release_year”, “duration”, and saving this into a new DataFrame called netflix_movies.\n\n#Investigate the Netflix movie data, keeping only the columns \"title\", \"country\", \"genre\", \"release_year\", \"duration\", and saving this into a new DataFrame called netflix_movies.\nnetflix_movies = netflix_subset[[\"title\", \"country\", \"genre\", \"release_year\", \"duration\"]]\nnetflix_movies.head(10)\n\n\n\n\n\n\n\n\n\ntitle\ncountry\ngenre\nrelease_year\nduration\n\n\n\n\n1\n7:19\nMexico\nDramas\n2016\n93\n\n\n2\n23:59\nSingapore\nHorror Movies\n2011\n78\n\n\n3\n9\nUnited States\nAction\n2009\n80\n\n\n4\n21\nUnited States\nDramas\n2008\n123\n\n\n6\n122\nEgypt\nHorror Movies\n2019\n95\n\n\n7\n187\nUnited States\nDramas\n1997\n119\n\n\n8\n706\nIndia\nHorror Movies\n2019\n118\n\n\n9\n1920\nIndia\nHorror Movies\n2008\n143\n\n\n10\n1922\nUnited States\nDramas\n2017\n103\n\n\n13\n2,215\nThailand\nDocumentaries\n2018\n89\n\n\n\n\n\n\n\n\n\n\nFilter netflix_movies to find the movies that are shorter than 60 minutes, saving the resulting DataFrame as short_movies; inspect the result to find possible contributing factors.\n\n#Filter netflix_movies to find the movies that are shorter than 60 minutes, saving the resulting DataFrame as short_movies; inspect the result to find possible contributing factors.\nshort_movies = netflix_movies[netflix_movies.duration&lt;60]\nshort_movies.head(2)\nprint(short_movies.shape)\n\n(420, 5)\n\n\n\nshort_movies.columns\n\nIndex(['title', 'country', 'genre', 'release_year', 'duration'], dtype='object')\n\n\n\nsns.countplot(y='genre', data=short_movies)\n\n\n\n\n\n\n\n\nGenre of the top four movies are Documentaries, Children, Standup and Uncategorized\n\n\nUsing a for loop and if/elif statements, iterate through the rows of netflix_movies and assign colors of your choice to four genre groups (“Children”, “Documentaries”, “Stand-Up”, and “Other” for everything else). Save the results in a colors list.\n\n#Using a for loop and if/elif statements, iterate through the rows of netflix_movies and assign colors of your choice to four genre groups (\"Children\", \"Documentaries\", \"Stand-Up\", and \"Other\" for everything else). Save the results in a colors list. \"\ncolors = []\n\nfor index, row in netflix_movies.iterrows():\n    genre = row['genre']\n    if genre == \"Children\":\n        colors.append(\"blue\")  # Assigning blue for Children genre\n    elif genre == \"Documentaries\":\n        colors.append(\"green\")  # Assigning green for Documentaries genre\n    elif genre == \"Stand-Up\":\n        colors.append(\"yellow\")  # Assigning yellow for Stand-Up genre\n    else:\n        colors.append(\"red\")  # Assigning red for Other genres\n\n#print(colors)\n\n\n\nInitialize a figure object called fig and create a scatter plot for movie duration by release year using the colors list to color the points and using the labels “Release year” for the x-axis, “Duration (min)” for the y-axis, and the title “Movie Duration by Year of Release\n\n#Initialize a figure object called fig and create a scatter plot for movie duration by release year using the colors list to color the points and using the labels \"Release year\" for the x-axis, \"Duration (min)\" for the y-axis, and the title \"Movie Duration by Year of Release\nfig, ax = plt.subplots()\nax.scatter(netflix_movies['release_year'],netflix_movies['duration'],color=colors)\nax.set_xlabel(\"Release year\")\nax.set_ylabel(\"Duration (min)\")\nax.set_title(\"Movie Duration by Year of Release\")\n\nplt.show()\n\n\n\n\n\n\n\n\n\nanswer=\"maybe\"",
    "crumbs": [
      "Project: Investigating Netflix Movies"
    ]
  },
  {
    "objectID": "Project-A_Visual_History_of_Nobel_Prize_Winners.html",
    "href": "Project-A_Visual_History_of_Nobel_Prize_Winners.html",
    "title": "Project: A Visual History of Nobel Prize Winners",
    "section": "",
    "text": "Task 1\nWhat is the most commonly awarded gender and birth country? Storing the string answers as top_gender and top_country.\ncount_by_gender = nobel.value_counts(\"sex\")\ntop_gender=count_by_gender.index[0]\ntop_gender\n\n'Male'\ncount_by_country=nobel.value_counts(\"birth_country\")\ntop_country = count_by_country.index[0]\ntop_country\n\n'United States of America'",
    "crumbs": [
      "Project: A Visual History of Nobel Prize Winners"
    ]
  },
  {
    "objectID": "Project-A_Visual_History_of_Nobel_Prize_Winners.html#task-2",
    "href": "Project-A_Visual_History_of_Nobel_Prize_Winners.html#task-2",
    "title": "Project: A Visual History of Nobel Prize Winners",
    "section": "Task 2",
    "text": "Task 2\nWhat decade had the highest proportion of US-born winners? Store this as an integer called max_decade_usa.\n\nnobel[\"USA_born_winers\"] = nobel['birth_country']=='United States of America'\nnobel[\"decade\"] = 10*(nobel[\"year\"]/10).astype(\"int\")\n\n\n10*(nobel[\"year\"]/10).astype(\"int\").unique()\n\narray([1900, 1910, 1920, 1930, 1940, 1950, 1960, 1970, 1980, 1990, 2000,\n       2010, 2020])\n\n\n\nnobel.head(5)\n\n\n\n\n\n\n\n\n\nyear\ncategory\nprize\nmotivation\nprize_share\nlaureate_id\nlaureate_type\nfull_name\nbirth_date\nbirth_city\nbirth_country\nsex\norganization_name\norganization_city\norganization_country\ndeath_date\ndeath_city\ndeath_country\nUSA_born_winers\ndecade\n\n\n\n\n0\n1901\nChemistry\nThe Nobel Prize in Chemistry 1901\n\"in recognition of the extraordinary services ...\n1/1\n160\nIndividual\nJacobus Henricus van 't Hoff\n1852-08-30\nRotterdam\nNetherlands\nMale\nBerlin University\nBerlin\nGermany\n1911-03-01\nBerlin\nGermany\nFalse\n1900\n\n\n1\n1901\nLiterature\nThe Nobel Prize in Literature 1901\n\"in special recognition of his poetic composit...\n1/1\n569\nIndividual\nSully Prudhomme\n1839-03-16\nParis\nFrance\nMale\nNaN\nNaN\nNaN\n1907-09-07\nChâtenay\nFrance\nFalse\n1900\n\n\n2\n1901\nMedicine\nThe Nobel Prize in Physiology or Medicine 1901\n\"for his work on serum therapy, especially its...\n1/1\n293\nIndividual\nEmil Adolf von Behring\n1854-03-15\nHansdorf (Lawice)\nPrussia (Poland)\nMale\nMarburg University\nMarburg\nGermany\n1917-03-31\nMarburg\nGermany\nFalse\n1900\n\n\n3\n1901\nPeace\nThe Nobel Peace Prize 1901\nNaN\n1/2\n462\nIndividual\nJean Henry Dunant\n1828-05-08\nGeneva\nSwitzerland\nMale\nNaN\nNaN\nNaN\n1910-10-30\nHeiden\nSwitzerland\nFalse\n1900\n\n\n4\n1901\nPeace\nThe Nobel Peace Prize 1901\nNaN\n1/2\n463\nIndividual\nFrédéric Passy\n1822-05-20\nParis\nFrance\nMale\nNaN\nNaN\nNaN\n1912-06-12\nParis\nFrance\nFalse\n1900\n\n\n\n\n\n\n\n\n\ndecade_sum = nobel.groupby(\"decade\")[\"USA_born_winers\"].agg(\"count\")\ndecade_sum\n\ndecade\n1900     57\n1910     40\n1920     54\n1930     56\n1940     43\n1950     72\n1960     79\n1970    104\n1980     97\n1990    104\n2000    123\n2010    121\n2020     50\nName: USA_born_winers, dtype: int64\n\n\n\nUSA_only = nobel[nobel[\"USA_born_winers\"]]\nUSA_only.head(10)\n\n\n\n\n\n\n\n\n\nyear\ncategory\nprize\nmotivation\nprize_share\nlaureate_id\nlaureate_type\nfull_name\nbirth_date\nbirth_city\nbirth_country\nsex\norganization_name\norganization_city\norganization_country\ndeath_date\ndeath_city\ndeath_country\nUSA_born_winers\ndecade\n\n\n\n\n35\n1906\nPeace\nThe Nobel Peace Prize 1906\nNaN\n1/1\n470\nIndividual\nTheodore Roosevelt\n1858-10-27\nNew York, NY\nUnited States of America\nMale\nNaN\nNaN\nNaN\n1919-01-06\nOyster Bay, NY\nUnited States of America\nTrue\n1900\n\n\n72\n1912\nPeace\nThe Nobel Peace Prize 1912\nNaN\n1/1\n480\nIndividual\nElihu Root\n1845-02-15\nClinton, NY\nUnited States of America\nMale\nNaN\nNaN\nNaN\n1937-02-07\nNew York, NY\nUnited States of America\nTrue\n1910\n\n\n79\n1914\nChemistry\nThe Nobel Prize in Chemistry 1914\n\"in recognition of his accurate determinations...\n1/1\n175\nIndividual\nTheodore William Richards\n1868-01-31\nGermantown, PA\nUnited States of America\nMale\nHarvard University\nCambridge, MA\nUnited States of America\n1928-04-02\nCambridge, MA\nUnited States of America\nTrue\n1910\n\n\n95\n1919\nPeace\nThe Nobel Peace Prize 1919\nNaN\n1/1\n483\nIndividual\nThomas Woodrow Wilson\n1856-12-28\nStaunton, VA\nUnited States of America\nMale\nNaN\nNaN\nNaN\n1924-02-03\nWashington, DC\nUnited States of America\nTrue\n1910\n\n\n117\n1923\nPhysics\nThe Nobel Prize in Physics 1923\n\"for his work on the elementary charge of elec...\n1/1\n28\nIndividual\nRobert Andrews Millikan\n1868-03-22\nMorrison, IL\nUnited States of America\nMale\nCalifornia Institute of Technology (Caltech)\nPasadena, CA\nUnited States of America\n1953-12-19\nSan Marino, CA\nUnited States of America\nTrue\n1920\n\n\n124\n1925\nPeace\nThe Nobel Peace Prize 1925\nNaN\n1/2\n489\nIndividual\nCharles Gates Dawes\n1865-08-27\nMarietta, OH\nUnited States of America\nMale\nNaN\nNaN\nNaN\n1951-04-23\nEvanston, IL\nUnited States of America\nTrue\n1920\n\n\n138\n1927\nPhysics\nThe Nobel Prize in Physics 1927\n\"for his discovery of the effect named after him\"\n1/2\n33\nIndividual\nArthur Holly Compton\n1892-09-10\nWooster, OH\nUnited States of America\nMale\nUniversity of Chicago\nChicago, IL\nUnited States of America\n1962-03-15\nBerkeley, CA\nUnited States of America\nTrue\n1920\n\n\n149\n1929\nPeace\nThe Nobel Peace Prize 1929\nNaN\n1/1\n494\nIndividual\nFrank Billings Kellogg\n1856-12-22\nPotsdam, NY\nUnited States of America\nMale\nNaN\nNaN\nNaN\n1937-12-21\nSt. Paul, MN\nUnited States of America\nTrue\n1920\n\n\n152\n1930\nLiterature\nThe Nobel Prize in Literature 1930\n\"for his vigorous and graphic art of descripti...\n1/1\n603\nIndividual\nSinclair Lewis\n1885-02-07\nSauk Centre, MN\nUnited States of America\nMale\nNaN\nNaN\nNaN\n1951-01-10\nRome\nItaly\nTrue\n1930\n\n\n160\n1931\nPeace\nThe Nobel Peace Prize 1931\nNaN\n1/2\n496\nIndividual\nJane Addams\n1860-09-06\nCedarville, IL\nUnited States of America\nFemale\nNaN\nNaN\nNaN\n1935-05-21\nChicago, IL\nUnited States of America\nTrue\n1930\n\n\n\n\n\n\n\n\n\ndecade_sum_usa = USA_only.groupby(\"decade\")[\"USA_born_winers\"].agg(\"count\")\ndecade_sum_usa\n\ndecade\n1900     1\n1910     3\n1920     4\n1930    14\n1940    13\n1950    21\n1960    21\n1970    33\n1980    31\n1990    42\n2000    52\n2010    38\n2020    18\nName: USA_born_winers, dtype: int64\n\n\n\nUSA_decade_prop = pd.DataFrame(decade_sum_usa/decade_sum)\n\n\nmax_decade_usa=USA_decade_prop[USA_decade_prop[\"USA_born_winers\"]==USA_decade_prop[\"USA_born_winers\"].max()].index[0]\n\n\nmax_decade_usa\n\n2000",
    "crumbs": [
      "Project: A Visual History of Nobel Prize Winners"
    ]
  },
  {
    "objectID": "Project-A_Visual_History_of_Nobel_Prize_Winners.html#task-3",
    "href": "Project-A_Visual_History_of_Nobel_Prize_Winners.html#task-3",
    "title": "Project: A Visual History of Nobel Prize Winners",
    "section": "Task 3",
    "text": "Task 3\nWhat decade and category pair had the highest proportion of female laureates? Store this as a dictionary called max_female_dict where the decade is the key and the category is the value.\n\ndecade_N_cat = nobel.groupby([\"decade\",\"category\"])[\"prize\"].agg(\"count\")\ndecade_N_cat\n\ndecade  category  \n1900    Chemistry      9\n        Literature    10\n        Medicine      11\n        Peace         14\n        Physics       13\n                      ..\n2020    Economics      9\n        Literature     4\n        Medicine       8\n        Peace          7\n        Physics       12\nName: prize, Length: 72, dtype: int64\n\n\n\nnobel[\"male\"] = nobel[\"sex\"]==\"Male\"\nnobel_male_only=nobel[nobel[\"male\"]]\nnobel_male_only.shape\n\ndecade_N_cat_male = nobel_male_only.groupby([\"decade\",\"category\"])[\"prize\"].agg(\"count\")\ndecade_N_cat_male\n\ndecade  category  \n1900    Chemistry      9\n        Literature     9\n        Medicine      11\n        Peace         12\n        Physics       12\n                      ..\n2020    Economics      8\n        Literature     2\n        Medicine       7\n        Peace          2\n        Physics       10\nName: prize, Length: 72, dtype: int64\n\n\n\nmale_prop = decade_N_cat_male/decade_N_cat\nmale_prop\n\ndecade  category  \n1900    Chemistry     1.000000\n        Literature    0.900000\n        Medicine      1.000000\n        Peace         0.857143\n        Physics       0.923077\n                        ...   \n2020    Economics     0.888889\n        Literature    0.500000\n        Medicine      0.875000\n        Peace         0.285714\n        Physics       0.833333\nName: prize, Length: 72, dtype: float64\n\n\n\nfemale_prop = 1-male_prop\nfemale_prop\nnp.max(female_prop)\nmax_female_prop = female_prop.idxmax()\n\n\nmax_female_dict = dict([max_female_prop])\nmax_female_dict\n\n{2020: 'Peace'}\n\n\n\n# Calculating the proportion of female laureates per decade\nnobel['female_winner'] = nobel.sex=='Female'\nprop_female_winners = nobel.groupby(['decade','category'],as_index=False)['female_winner'].mean()\nprop_female_winners.sort_values(\"female_winner\",ascending=False,inplace=True)\nprop_female_winners\n\n\n\n\n\n\n\n\n\ndecade\ncategory\nfemale_winner\n\n\n\n\n68\n2020\nLiterature\n0.500000\n\n\n64\n2010\nPeace\n0.357143\n\n\n50\n1990\nLiterature\n0.300000\n\n\n56\n2000\nLiterature\n0.300000\n\n\n66\n2020\nChemistry\n0.300000\n\n\n...\n...\n...\n...\n\n\n34\n1960\nPeace\n0.000000\n\n\n37\n1970\nEconomics\n0.000000\n\n\n38\n1970\nLiterature\n0.000000\n\n\n41\n1970\nPhysics\n0.000000\n\n\n36\n1970\nChemistry\n0.000000\n\n\n\n\n72 rows × 3 columns\n\n\n\n\n\n#max_female_dict = dict([prop_female_winners[\"decade\"].iloc[0],])\n\n\ndecade=prop_female_winners[\"decade\"].iloc[0]\ncategory=prop_female_winners[\"category\"].iloc[0]\nprint(category)\nmax_female_dict = {decade:category}\nmax_female_dict\n\nLiterature\n\n\n{2020: 'Literature'}",
    "crumbs": [
      "Project: A Visual History of Nobel Prize Winners"
    ]
  },
  {
    "objectID": "Project-A_Visual_History_of_Nobel_Prize_Winners.html#task-4",
    "href": "Project-A_Visual_History_of_Nobel_Prize_Winners.html#task-4",
    "title": "Project: A Visual History of Nobel Prize Winners",
    "section": "Task 4",
    "text": "Task 4\nWho was the first woman to receive a Nobel Prize, and in what category? Save your string answers as first_woman_name and first_woman_category.\n\nnobel_female_only = nobel[nobel.female_winner==True]\nnobel_female_only.sort_values(\"year\",ascending=True,inplace=True)\nnobel_female_only\n\n/var/folders/53/yp3kynfd7rn5y13c2wwfm33rmgtrfb/T/ipykernel_54063/3855593822.py:2: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  nobel_female_only.sort_values(\"year\",ascending=True,inplace=True)\n\n\n\n\n\n\n\n\n\n\nyear\ncategory\nprize\nmotivation\nprize_share\nlaureate_id\nlaureate_type\nfull_name\nbirth_date\nbirth_city\n...\norganization_name\norganization_city\norganization_country\ndeath_date\ndeath_city\ndeath_country\nUSA_born_winers\ndecade\nmale\nfemale_winner\n\n\n\n\n19\n1903\nPhysics\nThe Nobel Prize in Physics 1903\n\"in recognition of the extraordinary services ...\n1/4\n6\nIndividual\nMarie Curie, née Sklodowska\n1867-11-07\nWarsaw\n...\nNaN\nNaN\nNaN\n1934-07-04\nSallanches\nFrance\nFalse\n1900\nFalse\nTrue\n\n\n29\n1905\nPeace\nThe Nobel Peace Prize 1905\nNaN\n1/1\n468\nIndividual\nBaroness Bertha Sophie Felicita von Suttner, n...\n1843-06-09\nPrague\n...\nNaN\nNaN\nNaN\n1914-06-21\nVienna\nAustria\nFalse\n1900\nFalse\nTrue\n\n\n51\n1909\nLiterature\nThe Nobel Prize in Literature 1909\n\"in appreciation of the lofty idealism, vivid ...\n1/1\n579\nIndividual\nSelma Ottilia Lovisa Lagerlöf\n1858-11-20\nMårbacka\n...\nNaN\nNaN\nNaN\n1940-03-16\nMårbacka\nSweden\nFalse\n1900\nFalse\nTrue\n\n\n62\n1911\nChemistry\nThe Nobel Prize in Chemistry 1911\n\"in recognition of her services to the advance...\n1/1\n6\nIndividual\nMarie Curie, née Sklodowska\n1867-11-07\nWarsaw\n...\nSorbonne University\nParis\nFrance\n1934-07-04\nSallanches\nFrance\nFalse\n1910\nFalse\nTrue\n\n\n128\n1926\nLiterature\nThe Nobel Prize in Literature 1926\n\"for her idealistically inspired writings whic...\n1/1\n597\nIndividual\nGrazia Deledda\n1871-09-27\nNuoro, Sardinia\n...\nNaN\nNaN\nNaN\n1936-08-15\nRome\nItaly\nFalse\n1920\nFalse\nTrue\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n982\n2022\nLiterature\nThe Nobel Prize in Literature 2022\n\"for the courage and clinical acuity with whic...\n1/1\n1017\nIndividual\nAnnie Ernaux\n1940-09-01\nLillebonne\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nFalse\n2020\nFalse\nTrue\n\n\n993\n2023\nPhysics\nThe Nobel Prize in Physics 2023\n\"for experimental methods that generate attose...\n1/3\n1028\nIndividual\nAnne L’Huillier\n1958-08-16\nParis\n...\nLund University\nLund\nSweden\nNaN\nNaN\nNaN\nFalse\n2020\nFalse\nTrue\n\n\n998\n2023\nPeace\nThe Nobel Peace Prize 2023\n\"for her fight against the oppression of women...\n1/1\n1033\nIndividual\nNarges Mohammadi\n1972-04-21\nZanjan\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nFalse\n2020\nFalse\nTrue\n\n\n989\n2023\nMedicine\nThe Nobel Prize in Physiology or Medicine 2023\n\"for their discoveries concerning nucleoside b...\n1/2\n1024\nIndividual\nKatalin Karikó\n1955-01-17\nSzolnok\n...\nSzeged University\nSzeged\nHungary\nNaN\nNaN\nNaN\nFalse\n2020\nFalse\nTrue\n\n\n999\n2023\nEconomics\nThe Sveriges Riksbank Prize in Economic Scienc...\n\"for having advanced our understanding of wome...\n1/1\n1034\nIndividual\nClaudia Goldin\n1946-00-00\nNew York, NY\n...\nHarvard University\nCambridge, MA\nUnited States of America\nNaN\nNaN\nNaN\nTrue\n2020\nFalse\nTrue\n\n\n\n\n65 rows × 22 columns\n\n\n\n\n\nfirst_woman_name=nobel_female_only[\"full_name\"].iloc[0]\nfirst_woman_name\n\n'Marie Curie, née Sklodowska'\n\n\n\nfirst_woman_category = nobel_female_only[\"category\"].iloc[0]\nfirst_woman_category\n\n'Physics'",
    "crumbs": [
      "Project: A Visual History of Nobel Prize Winners"
    ]
  },
  {
    "objectID": "Project-A_Visual_History_of_Nobel_Prize_Winners.html#task-5",
    "href": "Project-A_Visual_History_of_Nobel_Prize_Winners.html#task-5",
    "title": "Project: A Visual History of Nobel Prize Winners",
    "section": "Task 5",
    "text": "Task 5\nWhich individuals or organizations have won multiple Nobel Prizes throughout the years? Store the full names in a list named repeat_list.\n\nnobel_by_name = pd.DataFrame(nobel.groupby(\"full_name\")[\"year\"].agg(\"count\"))\nnobel_by_name.sort_values(\"year\",ascending=False,inplace=True)\n\n\nnobel_by_name=nobel_by_name[nobel_by_name[\"year\"]&gt;=2]\nnobel_by_name\n\n\n\n\n\n\n\n\n\nyear\n\n\nfull_name\n\n\n\n\n\nComité international de la Croix Rouge (International Committee of the Red Cross)\n3\n\n\nOffice of the United Nations High Commissioner for Refugees (UNHCR)\n2\n\n\nFrederick Sanger\n2\n\n\nLinus Carl Pauling\n2\n\n\nJohn Bardeen\n2\n\n\nMarie Curie, née Sklodowska\n2\n\n\n\n\n\n\n\n\n\nrepeat_list = list(nobel_by_name.index)\n\n\nrepeat_list\n\n['Comité international de la Croix Rouge (International Committee of the Red Cross)',\n 'Office of the United Nations High Commissioner for Refugees (UNHCR)',\n 'Frederick Sanger',\n 'Linus Carl Pauling',\n 'John Bardeen',\n 'Marie Curie, née Sklodowska']",
    "crumbs": [
      "Project: A Visual History of Nobel Prize Winners"
    ]
  },
  {
    "objectID": "10_Intermediate_Data_Visualization_with_Seaborn.html",
    "href": "10_Intermediate_Data_Visualization_with_Seaborn.html",
    "title": "Intermediate Data Visualization with Seaborn",
    "section": "",
    "text": "Explore Datasets\nUse the DataFrames imported in the first cell to explore the data and practice your skills! - Use lmplot() to look at the relationship between temp and total_rentals from bike_share. Plot two regression lines for working and non-working days (workingday). - Create a heat map from daily_show to see how the types of guests (Group) have changed yearly. - Explore the variables from insurance and their relationship by creating pairwise plots and experimenting with different variables and types of plots. Additionally, you can use color to segment visually for region. - Make sure to add titles and labels to your plots and adjust their format for readability!",
    "crumbs": [
      "Intermediate Data Visualization with Seaborn"
    ]
  },
  {
    "objectID": "10_Intermediate_Data_Visualization_with_Seaborn.html#reading-a-csv-file",
    "href": "10_Intermediate_Data_Visualization_with_Seaborn.html#reading-a-csv-file",
    "title": "Intermediate Data Visualization with Seaborn",
    "section": "Reading a csv file",
    "text": "Reading a csv file\nBefore you analyze data, you will need to read the data into a pandas DataFrame. In this exercise, you will be looking at data from US School Improvement Grants in 2010. This program gave nearly $4B to schools to help them renovate or improve their programs.\nThis first step in most data analysis is to import pandas and seaborn and read a data file in order to analyze it further.\nThis course introduces a lot of new concepts, so if you ever need a quick refresher, download the Seaborn Cheat Sheet and keep it handy!\n\n\n\n\n\n\nInstructions\n\n\n\n\nImport pandas and seaborn using the standard naming conventions. - The path to the csv file is stored in the grant_file variable. - Use pandas to read the file. - Store the resulting DataFrame in the variable df.\n\n\n\n\ngrant_file=\"datasets/schoolimprovement2010grants.csv\"\n# import all modules\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Read in the DataFrame\ndf = pd.read_csv(grant_file)\ndf.head(3)\n\n\n\n\n\n\n\n\n\nUnnamed: 0\nSchool Name\nCity\nState\nDistrict Name\nModel Selected\nAward_Amount\nRegion\n\n\n\n\n0\n0\nHOGARTH KINGEEKUK MEMORIAL SCHOOL\nSAVOONGA\nAK\nBERING STRAIT SCHOOL DISTRICT\nTransformation\n471014\nWest\n\n\n1\n1\nAKIACHAK SCHOOL\nAKIACHAK\nAK\nYUPIIT SCHOOL DISTRICT\nTransformation\n520579\nWest\n\n\n2\n2\nGAMBELL SCHOOL\nGAMBELL\nAK\nBERING STRAIT SCHOOL DISTRICT\nTransformation\n449592\nWest",
    "crumbs": [
      "Intermediate Data Visualization with Seaborn"
    ]
  },
  {
    "objectID": "10_Intermediate_Data_Visualization_with_Seaborn.html#comparing-a-histogram-and-displot",
    "href": "10_Intermediate_Data_Visualization_with_Seaborn.html#comparing-a-histogram-and-displot",
    "title": "Intermediate Data Visualization with Seaborn",
    "section": "Comparing a histogram and displot",
    "text": "Comparing a histogram and displot\nThe pandas library supports simple plotting of data, which is very convenient when data is already likely to be in a pandas DataFrame.\nSeaborn generally does more statistical analysis on data and can provide more sophisticated insight into the data. In this exercise, we will compare a pandas histogram vs the seaborn displot. ## Instructions - Use the pandas’ plot.hist() function to plot a histogram of the Award_Amount column. - Use Seaborn’s displot() function to plot a distribution plot of the same column.\n\n# Display pandas histogram\ndf['Award_Amount'].plot.hist()\nplt.show()\n\n# Clear out the pandas histogram\nplt.clf()\n\n# Display a Seaborn displot\nsns.displot(df['Award_Amount'])\nplt.show()\n\n# Clear the displot\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;",
    "crumbs": [
      "Intermediate Data Visualization with Seaborn"
    ]
  },
  {
    "objectID": "10_Intermediate_Data_Visualization_with_Seaborn.html#plot-a-histogram",
    "href": "10_Intermediate_Data_Visualization_with_Seaborn.html#plot-a-histogram",
    "title": "Intermediate Data Visualization with Seaborn",
    "section": "Plot a histogram",
    "text": "Plot a histogram\nThe displot() function will return a histogram by default. The displot() can also create a KDE or rug plot which are useful ways to look at the data. Seaborn can also combine these plots so you can perform more meaningful analysis.\n\n\n\n\n\n\nInstructions\n\n\n\n\nCreate a displot for the data. - Explicitly pass in the number 20 for the number of bins in the histogram. - Display the plot using plt.show().\n\n\n\n\n# Create a displot\nsns.displot(df['Award_Amount'],\n             bins=20)\n\n# Display the plot\nplt.show()",
    "crumbs": [
      "Intermediate Data Visualization with Seaborn"
    ]
  },
  {
    "objectID": "10_Intermediate_Data_Visualization_with_Seaborn.html#rug-plot-and-kde-shading",
    "href": "10_Intermediate_Data_Visualization_with_Seaborn.html#rug-plot-and-kde-shading",
    "title": "Intermediate Data Visualization with Seaborn",
    "section": "Rug plot and kde shading",
    "text": "Rug plot and kde shading\nNow that you understand some function arguments for displot(), we can continue further refining the output. This process of creating a visualization and updating it in an incremental fashion is a useful and common approach to look at data from multiple perspectives.\nSeaborn excels at making this process simple.\n\n\n\n\n\n\nInstructions\n\n\n\n\nCreate a displot of the Award_Amount column in the df. - Configure it to show a shaded kde plot (using the kind and fill parameters). - Add a rug plot above the x axis (using the rug parameter). - Display the plot.\n\n\n\n\n# Create a displot of the Award Amount\nsns.displot(df['Award_Amount'],\n             kind='kde',\n             rug=True,\n             fill=True)\n\n# Plot the results\nplt.show()",
    "crumbs": [
      "Intermediate Data Visualization with Seaborn"
    ]
  },
  {
    "objectID": "10_Intermediate_Data_Visualization_with_Seaborn.html#create-a-regression-plot",
    "href": "10_Intermediate_Data_Visualization_with_Seaborn.html#create-a-regression-plot",
    "title": "Intermediate Data Visualization with Seaborn",
    "section": "Create a regression plot",
    "text": "Create a regression plot\nFor this set of exercises, we will be looking at FiveThirtyEight’s data on which US State has the worst drivers. The data set includes summary level information about fatal accidents as well as insurance premiums for each state as of 2010.\nIn this exercise, we will look at the difference between the regression plotting functions.\n\n\n\n\n\n\nInstructions\n\n\n\n\nThe data is available in the dataframe called df. - Create a regression plot using regplot() with “insurance_losses” on the x axis and “premiums” on the y axis. - Create a regression plot of “premiums” versus “insurance_losses” using lmplot(). Display the plot.\n\n\n\n\ndf=pd.read_csv(\"datasets/insurance_premiums.csv\")\n# Create a regression plot of premiums vs. insurance_losses\nsns.regplot(data=df, x='insurance_losses', y='premiums')\n# Display the plot\nplt.show()\n\n\n\n\n\n\n\n\n\n# Create an lmplot of premiums vs. insurance_losses\nsns.lmplot(data=df,x='insurance_losses',y='premiums')\n# Display the second plot\nplt.show()",
    "crumbs": [
      "Intermediate Data Visualization with Seaborn"
    ]
  },
  {
    "objectID": "10_Intermediate_Data_Visualization_with_Seaborn.html#plotting-multiple-variables",
    "href": "10_Intermediate_Data_Visualization_with_Seaborn.html#plotting-multiple-variables",
    "title": "Intermediate Data Visualization with Seaborn",
    "section": "Plotting multiple variables",
    "text": "Plotting multiple variables\nSince we are using lmplot() now, we can look at the more complex interactions of data. This data set includes geographic information by state and area. It might be interesting to see if there is a difference in relationships based on the Region of the country.\n\n\n\n\n\n\nInstructions\n\n\n\n\nUse lmplot() to look at the relationship between insurance_losses and premiums. - Plot a regression line for each Region of the country.\n\n\n\n\n# Create a regression plot using hue\nsns.lmplot(data=df,\n           x=\"insurance_losses\",\n           y=\"premiums\",\n           hue=\"Region\")\n\n# Show the results\nplt.show()",
    "crumbs": [
      "Intermediate Data Visualization with Seaborn"
    ]
  },
  {
    "objectID": "10_Intermediate_Data_Visualization_with_Seaborn.html#facetting-multiple-regressions",
    "href": "10_Intermediate_Data_Visualization_with_Seaborn.html#facetting-multiple-regressions",
    "title": "Intermediate Data Visualization with Seaborn",
    "section": "Facetting multiple regressions",
    "text": "Facetting multiple regressions\nlmplot() allows us to facet the data across multiple rows and columns. In the previous plot, the multiple lines were difficult to read in one plot. We can try creating multiple plots by Region to see if that is a more useful visualization.\n\n\n\n\n\n\nInstructions\n\n\n\n\nUse lmplot() to look at the relationship between insurance_losses and premiums. - Create a plot for each Region of the country. - Display the plots across multiple rows.\n\n\n\n\n# Create a regression plot with multiple rows\nsns.lmplot(data=df,\n           x=\"insurance_losses\",\n           y=\"premiums\",\n           row=\"Region\")\n\n# Show the plot\nplt.show()",
    "crumbs": [
      "Intermediate Data Visualization with Seaborn"
    ]
  },
  {
    "objectID": "10_Intermediate_Data_Visualization_with_Seaborn.html#theme-examples-with-sns.set_style",
    "href": "10_Intermediate_Data_Visualization_with_Seaborn.html#theme-examples-with-sns.set_style",
    "title": "Intermediate Data Visualization with Seaborn",
    "section": "Theme examples with sns.set_style()",
    "text": "Theme examples with sns.set_style()\n\nfor style in ['white','dark','whitegrid','darkgrid','ticks']:    \n    sns.set_style(style)    \n    sns.displot(df['premiums'])    \n    plt.show()",
    "crumbs": [
      "Intermediate Data Visualization with Seaborn"
    ]
  },
  {
    "objectID": "10_Intermediate_Data_Visualization_with_Seaborn.html#setting-the-default-style",
    "href": "10_Intermediate_Data_Visualization_with_Seaborn.html#setting-the-default-style",
    "title": "Intermediate Data Visualization with Seaborn",
    "section": "Setting the default style",
    "text": "Setting the default style\nFor these exercises, we will be looking at fair market rent values calculated by the US Housing and Urban Development Department. This data is used to calculate guidelines for several federal programs. The actual values for rents vary greatly across the US. We can use this data to get some experience with configuring Seaborn plots.\nAll of the necessary imports for seaborn, pandas and matplotlib have been completed. The data is stored in the pandas DataFrame df.\nBy the way, if you haven’t downloaded it already, check out the Seaborn Cheat Sheet. It includes an overview of the most important concepts, functions and methods and might come in handy if you ever need a quick refresher!\n\n\n\n\n\n\nInstructions\n\n\n\n\nPlot a pandas histogram without adjusting the style. - Set Seaborn’s default style. - Create another pandas histogram of the fmr_2 column which represents fair market rent for a 2-bedroom apartment.\n\n\n\n\n# Plot the pandas histogram\ndf['premiums'].plot.hist()\nplt.show()\nplt.clf()\n\n# Set the default seaborn style\nsns.set()\n\n# Plot the pandas histogram again\ndf['premiums'].plot.hist()\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;",
    "crumbs": [
      "Intermediate Data Visualization with Seaborn"
    ]
  },
  {
    "objectID": "10_Intermediate_Data_Visualization_with_Seaborn.html#comparing-styles",
    "href": "10_Intermediate_Data_Visualization_with_Seaborn.html#comparing-styles",
    "title": "Intermediate Data Visualization with Seaborn",
    "section": "Comparing styles",
    "text": "Comparing styles\nSeaborn supports setting different styles that can control the aesthetics of the final plot. In this exercise, you will plot the same data in two different styles in order to see how the styles change the output.\n\n\n\n\n\n\nInstructions\n\n\n\n\nCreate a displot() of the fmr_2 column in df using a dark style. Use plt.clf() to clear the figure. - Create the same displot() of fmr_2 using a whitegrid style. Clear the plot after showing it.\n\n\n\n\nsns.set_style('dark')\nsns.displot(df['premiums'])\nplt.show()\nplt.clf()\n\nsns.set_style('whitegrid')\nsns.displot(df['premiums'])\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;",
    "crumbs": [
      "Intermediate Data Visualization with Seaborn"
    ]
  },
  {
    "objectID": "10_Intermediate_Data_Visualization_with_Seaborn.html#removing-spines",
    "href": "10_Intermediate_Data_Visualization_with_Seaborn.html#removing-spines",
    "title": "Intermediate Data Visualization with Seaborn",
    "section": "Removing spines",
    "text": "Removing spines\nIn general, visualizations should minimize extraneous markings so that the data speaks for itself. Seaborn allows you to remove the lines on the top, bottom, left and right axis, which are often called spines.\n\n\n\n\n\n\nInstructions\n\n\n\n\nUse a white style for the plot. - Create a lmplot() comparing the pop2010 and the fmr_2 columns. - Remove the top and right spines using despine().\n\n\n\n\ndf.head(2)\n# Set the style to white\nsns.set_style('white')\n\n# Create a regression plot\nsns.lmplot(data=df,\n           x='premiums',\n           y='insurance_losses')\n\n# Remove the spines\nsns.despine()\n\n# Show the plot and clear the figure\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;",
    "crumbs": [
      "Intermediate Data Visualization with Seaborn"
    ]
  },
  {
    "objectID": "10_Intermediate_Data_Visualization_with_Seaborn.html#defining-a-color-for-a-plot",
    "href": "10_Intermediate_Data_Visualization_with_Seaborn.html#defining-a-color-for-a-plot",
    "title": "Intermediate Data Visualization with Seaborn",
    "section": "Defining a color for a plot",
    "text": "Defining a color for a plot\n\ndf=college_data\nsns.set(color_codes=True)\nsns.displot(df['Tuition'], color='g')",
    "crumbs": [
      "Intermediate Data Visualization with Seaborn"
    ]
  },
  {
    "objectID": "10_Intermediate_Data_Visualization_with_Seaborn.html#palettes",
    "href": "10_Intermediate_Data_Visualization_with_Seaborn.html#palettes",
    "title": "Intermediate Data Visualization with Seaborn",
    "section": "Palettes",
    "text": "Palettes\n\npalettes = ['deep', 'muted', 'pastel', 'bright', 'dark','colorblind']\nfor p in palettes:\n    sns.set_palette(p)\n    sns.displot(df['Tuition'])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDisplaying Palettes\n\npalettes = ['deep', 'muted', 'pastel', 'bright','dark','colorblind']\nfor p in palettes:    \n    sns.set_palette(p)    \n    sns.palplot(sns.color_palette())    \n    plt.show()",
    "crumbs": [
      "Intermediate Data Visualization with Seaborn"
    ]
  },
  {
    "objectID": "10_Intermediate_Data_Visualization_with_Seaborn.html#matplotlib-color-codes",
    "href": "10_Intermediate_Data_Visualization_with_Seaborn.html#matplotlib-color-codes",
    "title": "Intermediate Data Visualization with Seaborn",
    "section": "Matplotlib color codes",
    "text": "Matplotlib color codes\nSeaborn offers several options for modifying the colors of your visualizations. The simplest approach is to explicitly state the color of the plot. A quick way to change colors is to use the standard matplotlib color codes.\n\n\n\n\n\n\nInstructions\n\n\n\n\nSet the default Seaborn style and enable the matplotlib color codes. - Create a displot for the fmr_3 column using matplotlib’s magenta (m) color code.\n\n\n\n\n# Set style, enable color code, and create a magenta displot\nsns.set(color_codes=True)\nsns.displot(df['Tuition'], color='m')\n\n# Show the plot\nplt.show()",
    "crumbs": [
      "Intermediate Data Visualization with Seaborn"
    ]
  },
  {
    "objectID": "10_Intermediate_Data_Visualization_with_Seaborn.html#using-default-palettes",
    "href": "10_Intermediate_Data_Visualization_with_Seaborn.html#using-default-palettes",
    "title": "Intermediate Data Visualization with Seaborn",
    "section": "Using default palettes",
    "text": "Using default palettes\nSeaborn includes several default palettes that can be easily applied to your plots. In this example, we will look at the impact of two different palettes on the same displot.\n\n\n\n\n\n\nInstructions\n\n\n\n\nCreate a for loop to show the difference between the bright and colorblind palette. - Set the palette using the set_palette() function. - Use a displot of the fmr_3 column.\n\n\n\n\n# Loop through differences between bright and colorblind palettes\nfor p in ['bright', 'colorblind']:\n    sns.set_palette(p)\n    sns.displot(df['Tuition'])\n    plt.show()\n    \n    # Clear the plots    \n    plt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;",
    "crumbs": [
      "Intermediate Data Visualization with Seaborn"
    ]
  },
  {
    "objectID": "10_Intermediate_Data_Visualization_with_Seaborn.html#creating-custom-palettes",
    "href": "10_Intermediate_Data_Visualization_with_Seaborn.html#creating-custom-palettes",
    "title": "Intermediate Data Visualization with Seaborn",
    "section": "Creating Custom Palettes",
    "text": "Creating Custom Palettes\nChoosing a cohesive palette that works for your data can be time consuming. Fortunately, Seaborn provides the color_palette() function to create your own custom sequential, categorical, or diverging palettes. Seaborn also makes it easy to view your palettes by using the palplot() function.\nIn this exercise, you can experiment with creating different palettes.\n\n\n\n\n\n\nInstructions\n\n\n\n\nCreate and display a Purples sequential palette containing 8 colors. - Create and display a palette with 10 colors using the husl system. - Create and display a diverging palette with 6 colors coolwarm.\n\n\n\n\nsns.palplot(sns.color_palette(\"Purples\",8))\nplt.show()\nsns.palplot(sns.color_palette(\"husl\",10))\nplt.show()\nsns.palplot(sns.color_palette(\"coolwarm\",6))\nplt.show()",
    "crumbs": [
      "Intermediate Data Visualization with Seaborn"
    ]
  },
  {
    "objectID": "10_Intermediate_Data_Visualization_with_Seaborn.html#matplotlib-axes",
    "href": "10_Intermediate_Data_Visualization_with_Seaborn.html#matplotlib-axes",
    "title": "Intermediate Data Visualization with Seaborn",
    "section": "Matplotlib Axes",
    "text": "Matplotlib Axes\n\nMost customization available through matplotlib\nAxes objectsAxes can be passed to seaborn functions\n\n\nfig, ax = plt.subplots()\nsns.histplot(df['Tuition'], ax=ax)\nax.set(xlabel='Tuition 2013-14')",
    "crumbs": [
      "Intermediate Data Visualization with Seaborn"
    ]
  },
  {
    "objectID": "10_Intermediate_Data_Visualization_with_Seaborn.html#further-customizations",
    "href": "10_Intermediate_Data_Visualization_with_Seaborn.html#further-customizations",
    "title": "Intermediate Data Visualization with Seaborn",
    "section": "Further Customizations",
    "text": "Further Customizations\n\nThe axes object supports many common customizations\n\n\nfig, ax = plt.subplots()\nsns.histplot(df['Tuition'], ax=ax)\nax.set(xlabel=\"Tuition 2013-14\",       ylabel=\"Distribution\", xlim=(0, 50000), title=\"2013-14 Tuition and Fees Distribution\")\n\n[Text(0.5, 0, 'Tuition 2013-14'),\n Text(0, 0.5, 'Distribution'),\n (0.0, 50000.0),\n Text(0.5, 1.0, '2013-14 Tuition and Fees Distribution')]",
    "crumbs": [
      "Intermediate Data Visualization with Seaborn"
    ]
  },
  {
    "objectID": "10_Intermediate_Data_Visualization_with_Seaborn.html#combining-plots",
    "href": "10_Intermediate_Data_Visualization_with_Seaborn.html#combining-plots",
    "title": "Intermediate Data Visualization with Seaborn",
    "section": "Combining Plots",
    "text": "Combining Plots\n\nIt is possible to combine and configure multiple plots\n\n\nfig, (ax0, ax1) = plt.subplots(nrows=1, ncols=2,sharey=True, figsize=(7,4))\nsns.histplot(df['Tuition'], stat='density', ax=ax0)\nsns.histplot(df.query('Regions == \"South East\"')['Tuition'], stat='density', ax=ax1)\nax1.set(xlabel='Tuition (South East)', xlim=(0, 70000))\nax1.axvline(x=20000, label='My Budget', linestyle='--')\nax1.legend()",
    "crumbs": [
      "Intermediate Data Visualization with Seaborn"
    ]
  },
  {
    "objectID": "10_Intermediate_Data_Visualization_with_Seaborn.html#using-matplotlib-axes",
    "href": "10_Intermediate_Data_Visualization_with_Seaborn.html#using-matplotlib-axes",
    "title": "Intermediate Data Visualization with Seaborn",
    "section": "Using matplotlib axes",
    "text": "Using matplotlib axes\nSeaborn uses matplotlib as the underlying library for creating plots. Most of the time, you can use the Seaborn API to modify your visualizations but sometimes it is helpful to use matplotlib’s functions to customize your plots. The most important object in this case is matplotlib’s axes.\nOnce you have an axes object, you can perform a lot of customization of your plot.\nIn these examples, the US HUD data is loaded in the dataframe df and all libraries are imported.\n\n\n\n\n\n\nInstructions\n\n\n\n\nUse plt.subplots() to create a axes and figure objects. - Plot a histplot of column fmr_3 on the axes. - Set a more useful label on the x axis of “3 Bedroom Fair Market Rent”.\n\n\n\n\n# Create a figure and axes\nfig, ax = plt.subplots()\n\n# Plot the distribution of data\nsns.histplot(df['Tuition'], ax=ax)\n\n# Create a more descriptive x axis label\nax.set(xlabel=\"Tuition fees\")\n\n# Show the plot\nplt.show()",
    "crumbs": [
      "Intermediate Data Visualization with Seaborn"
    ]
  },
  {
    "objectID": "10_Intermediate_Data_Visualization_with_Seaborn.html#additional-plot-customizations",
    "href": "10_Intermediate_Data_Visualization_with_Seaborn.html#additional-plot-customizations",
    "title": "Intermediate Data Visualization with Seaborn",
    "section": "Additional plot customizations",
    "text": "Additional plot customizations\nThe matplotlib API supports many common customizations such as labeling axes, adding titles, and setting limits. Let’s complete another customization exercise.\n\n\n\n\n\n\nInstructions\n\n\n\n\nCreate a histplot of the fmr_1 column. - Modify the x axis label to say “1 Bedroom Fair Market Rent”. - Change the x axis limits to be between 100 and 1500. - Add a descriptive title of “US Rent” to the plot.\n\n\n\n\n# Create a figure and axes\nfig, ax = plt.subplots()\n\n# Plot the distribution of 1 bedroom rents\nsns.histplot(df['Tuition'], ax=ax)\n\n# Modify the properties of the plot\nax.set(xlabel=\"Tuition\",\n       xlim=(500,50000),\n       title=\"University Tuition fees\")\n\n# Display the plot\nplt.show()",
    "crumbs": [
      "Intermediate Data Visualization with Seaborn"
    ]
  },
  {
    "objectID": "10_Intermediate_Data_Visualization_with_Seaborn.html#adding-annotations",
    "href": "10_Intermediate_Data_Visualization_with_Seaborn.html#adding-annotations",
    "title": "Intermediate Data Visualization with Seaborn",
    "section": "Adding annotations",
    "text": "Adding annotations\nEach of the enhancements we have covered can be combined together. In the next exercise, we can annotate our distribution plot to include lines that show the mean and median rent prices.\nFor this example, the palette has been changed to bright using sns.set_palette()\n\n\n\n\n\n\nInstructions\n\n\n\n\nCreate a figure and axes. - Plot the fmr_1 column distribution. - Add a vertical line using axvline for the median and mean of the values which are already defined.\n\n\n\n\nmean=df['Tuition'].mean()\nmedian=df['Tuition'].median()\n# Create a figure and axes. Then plot the data\nfig, ax = plt.subplots()\nsns.histplot(df['Tuition'], ax=ax)\n\n# Customize the labels and limits\nax.set(xlabel=\"Tuition\", xlim=(100,50000), title=\"Tuition Fees\")\n\n# Add vertical lines for the median and mean\nax.axvline(x=median, color='m', label='Median', linestyle='--', linewidth=2)\nax.axvline(x=mean, color='b', label='Mean', linestyle='-', linewidth=2)\n\n# Show the legend and plot the data\nax.legend()\nplt.show()",
    "crumbs": [
      "Intermediate Data Visualization with Seaborn"
    ]
  },
  {
    "objectID": "10_Intermediate_Data_Visualization_with_Seaborn.html#multiple-plots",
    "href": "10_Intermediate_Data_Visualization_with_Seaborn.html#multiple-plots",
    "title": "Intermediate Data Visualization with Seaborn",
    "section": "Multiple plots",
    "text": "Multiple plots\nFor the final exercise we will plot a comparison of the fair market rents for 1-bedroom and 2-bedroom apartments.\n\n\n\n\n\n\nInstructions\n\n\n\n\nCreate two axes objects, ax0 and ax1. - Plot fmr_1 on ax0 and fmr_2 on ax1. - Display the plots side by side.\n\n\n\n\n# Create a plot with 1 row and 2 columns that share the y axis label\nfig, (ax0, ax1) = plt.subplots(nrows=1, ncols=2, sharey=True)\n\n# Plot the distribution of 1 bedroom apartments on ax0\nsns.histplot(df['PCTPELL'], ax=ax0)\nax0.set(xlabel=\"PCTPELL\", xlim=(0.1,0.9))\n\n# Plot the distribution of 2 bedroom apartments on ax1\nsns.histplot(df['PCTFLOAN'], ax=ax1)\nax1.set(xlabel=\"PCTFLOAN\", xlim=(0.1,0.9))\n\n# Display the plot\nplt.show()",
    "crumbs": [
      "Intermediate Data Visualization with Seaborn"
    ]
  },
  {
    "objectID": "10_Intermediate_Data_Visualization_with_Seaborn.html#plots-of-each-observation---stripplot",
    "href": "10_Intermediate_Data_Visualization_with_Seaborn.html#plots-of-each-observation---stripplot",
    "title": "Intermediate Data Visualization with Seaborn",
    "section": "Plots of each observation - stripplot",
    "text": "Plots of each observation - stripplot\n\ndf=insurance\ndf.head()\n\n\n\n\n\n\n\n\n\nState\nfatal_collisions\nfatal_collisions_speeding\nfatal_collisions_alc\nfatal_collisions_not_distracted\nfatal_collisions_no_hist\npremiums\ninsurance_losses\nRegion\n\n\n\n\n0\nAlabama\n18.8\n39\n30\n96\n80\n784.55\n145.08\nSouth\n\n\n1\nAlaska\n18.1\n41\n25\n90\n94\n1053.48\n133.93\nWest\n\n\n2\nArizona\n18.6\n35\n28\n84\n96\n899.47\n110.35\nWest\n\n\n3\nArkansas\n22.4\n18\n26\n94\n95\n827.34\n142.39\nSouth\n\n\n4\nCalifornia\n12.0\n35\n28\n91\n89\n878.41\n165.63\nWest\n\n\n\n\n\n\n\n\n\nsns.stripplot(data=df, y=\"Region\", x=\"insurance_losses\", jitter=True)",
    "crumbs": [
      "Intermediate Data Visualization with Seaborn"
    ]
  },
  {
    "objectID": "10_Intermediate_Data_Visualization_with_Seaborn.html#plots-of-each-observation---swarmplot",
    "href": "10_Intermediate_Data_Visualization_with_Seaborn.html#plots-of-each-observation---swarmplot",
    "title": "Intermediate Data Visualization with Seaborn",
    "section": "Plots of each observation - swarmplot",
    "text": "Plots of each observation - swarmplot\n\nsns.swarmplot(data=df, y=\"Region\", x=\"insurance_losses\")",
    "crumbs": [
      "Intermediate Data Visualization with Seaborn"
    ]
  },
  {
    "objectID": "10_Intermediate_Data_Visualization_with_Seaborn.html#abstract-representations---boxplot",
    "href": "10_Intermediate_Data_Visualization_with_Seaborn.html#abstract-representations---boxplot",
    "title": "Intermediate Data Visualization with Seaborn",
    "section": "Abstract representations - boxplot",
    "text": "Abstract representations - boxplot\n\nsns.boxplot(data=df, y=\"Region\", x=\"insurance_losses\")",
    "crumbs": [
      "Intermediate Data Visualization with Seaborn"
    ]
  },
  {
    "objectID": "10_Intermediate_Data_Visualization_with_Seaborn.html#abstract-representation---violinplot",
    "href": "10_Intermediate_Data_Visualization_with_Seaborn.html#abstract-representation---violinplot",
    "title": "Intermediate Data Visualization with Seaborn",
    "section": "Abstract representation - violinplot",
    "text": "Abstract representation - violinplot\n\nsns.violinplot(data=df, y=\"Region\", x=\"insurance_losses\")",
    "crumbs": [
      "Intermediate Data Visualization with Seaborn"
    ]
  },
  {
    "objectID": "10_Intermediate_Data_Visualization_with_Seaborn.html#abstract-representation---boxenplot",
    "href": "10_Intermediate_Data_Visualization_with_Seaborn.html#abstract-representation---boxenplot",
    "title": "Intermediate Data Visualization with Seaborn",
    "section": "Abstract representation - boxenplot",
    "text": "Abstract representation - boxenplot\n\nsns.boxenplot(data=df, y=\"Region\", x=\"insurance_losses\")",
    "crumbs": [
      "Intermediate Data Visualization with Seaborn"
    ]
  },
  {
    "objectID": "10_Intermediate_Data_Visualization_with_Seaborn.html#statistical-estimates---barplot",
    "href": "10_Intermediate_Data_Visualization_with_Seaborn.html#statistical-estimates---barplot",
    "title": "Intermediate Data Visualization with Seaborn",
    "section": "Statistical estimates - barplot",
    "text": "Statistical estimates - barplot\n\nsns.barplot(data=df, y=\"Region\", x=\"insurance_losses\")#,hue='State')",
    "crumbs": [
      "Intermediate Data Visualization with Seaborn"
    ]
  },
  {
    "objectID": "10_Intermediate_Data_Visualization_with_Seaborn.html#statistical-estimates---pointplot",
    "href": "10_Intermediate_Data_Visualization_with_Seaborn.html#statistical-estimates---pointplot",
    "title": "Intermediate Data Visualization with Seaborn",
    "section": "Statistical estimates - pointplot",
    "text": "Statistical estimates - pointplot\n\nsns.pointplot(data=df, y=\"Region\", x=\"insurance_losses\")#,hue='State')",
    "crumbs": [
      "Intermediate Data Visualization with Seaborn"
    ]
  },
  {
    "objectID": "10_Intermediate_Data_Visualization_with_Seaborn.html#stripplot-and-swarmplot",
    "href": "10_Intermediate_Data_Visualization_with_Seaborn.html#stripplot-and-swarmplot",
    "title": "Intermediate Data Visualization with Seaborn",
    "section": "stripplot() and swarmplot()",
    "text": "stripplot() and swarmplot()\nMany datasets have categorical data and Seaborn supports several useful plot types for this data. In this example, we will continue to look at the 2010 School Improvement data and segment the data by the types of school improvement models used.\nAs a refresher, here is the KDE distribution of the Award Amounts:\nWhile this plot is useful, there is a lot more we can learn by looking at the individual Award_Amount and how the amounts are distributed among the four categories.\n\n\n\n\n\n\nInstructions\n\n\n\n\nCreate a stripplot of the Award_Amount with the Model Selected on the y axis with jitter enabled. - Create a swarmplot() of the same data, but also include the hue by Region.\n\n\n\n\ndf=college_data\nprint(df.columns)\n\nIndex(['INSTNM', 'OPEID', 'REGION', 'SAT_AVG_ALL', 'PCTPELL', 'PCTFLOAN',\n       'ADM_RATE_ALL', 'UG', 'AVGFACSAL', 'COMPL_RPY_5YR_RT', 'DEBT_MDN',\n       'MEDIAN_HH_INC', 'ICLEVEL', 'HIGHDEG', 'CONTROL', 'WOMENONLY',\n       'MENONLY', 'LOCALE', 'Tuition', 'Degree_Type', 'Ownership', 'Regions',\n       'Locales', 'Locale_Short'],\n      dtype='object')\n\n\n\ndf.head()\n\n\n\n\n\n\n\n\n\nINSTNM\nOPEID\nREGION\nSAT_AVG_ALL\nPCTPELL\nPCTFLOAN\nADM_RATE_ALL\nUG\nAVGFACSAL\nCOMPL_RPY_5YR_RT\n...\nCONTROL\nWOMENONLY\nMENONLY\nLOCALE\nTuition\nDegree_Type\nOwnership\nRegions\nLocales\nLocale_Short\n\n\n\n\n0\nAlabama A & M University\n100200\n5\n850.0\n0.7249\n0.8159\n0.653841\n4380.0\n7017.0\n0.477631579\n...\n1\n0.0\n0.0\n12.0\n13435.0\nGraduate\nPublic\nSouth East\nCity: Midsize\nCity\n\n\n1\nUniversity of Alabama at Birmingham\n105200\n5\n1147.0\n0.3505\n0.5218\n0.604275\n10331.0\n10221.0\n0.673230442\n...\n1\n0.0\n0.0\n12.0\n16023.0\nGraduate\nPublic\nSouth East\nCity: Midsize\nCity\n\n\n2\nAmridge University\n2503400\n5\nNaN\n0.7455\n0.8781\nNaN\n98.0\n3217.0\n0.636363636\n...\n2\n0.0\n0.0\n12.0\n8862.0\nGraduate\nPrivate non-profit\nSouth East\nCity: Midsize\nCity\n\n\n3\nUniversity of Alabama in Huntsville\n105500\n5\n1221.0\n0.3179\n0.4589\n0.811971\n5220.0\n9514.0\n0.762222222\n...\n1\n0.0\n0.0\n12.0\n18661.0\nGraduate\nPublic\nSouth East\nCity: Midsize\nCity\n\n\n4\nAlabama State University\n100500\n5\n844.0\n0.7567\n0.7692\n0.463858\n4348.0\n7940.0\n0.43006993\n...\n1\n0.0\n0.0\n12.0\n7400.0\nGraduate\nPublic\nSouth East\nCity: Midsize\nCity\n\n\n\n\n5 rows × 24 columns\n\n\n\n\n\n# Create the stripplot\nsns.stripplot(data=df,\n         x='Tuition',\n         y='Regions',\n         jitter=True\n         )\n\nplt.show()\n\n\n\n\n\n\n\n\n\n# Create the stripplot\nsns.swarmplot(data=df,\n         x='Tuition',\n         y='Regions',\n         hue='Ownership'\n         )\n\nplt.show()\n\n/Users/00110139/miniforge3/envs/TF2/lib/python3.9/site-packages/seaborn/categorical.py:3399: UserWarning: 90.9% of the points cannot be placed; you may want to decrease the size of the markers or use stripplot.\n  warnings.warn(msg, UserWarning)\n/Users/00110139/miniforge3/envs/TF2/lib/python3.9/site-packages/seaborn/categorical.py:3399: UserWarning: 82.5% of the points cannot be placed; you may want to decrease the size of the markers or use stripplot.\n  warnings.warn(msg, UserWarning)\n/Users/00110139/miniforge3/envs/TF2/lib/python3.9/site-packages/seaborn/categorical.py:3399: UserWarning: 82.7% of the points cannot be placed; you may want to decrease the size of the markers or use stripplot.\n  warnings.warn(msg, UserWarning)\n/Users/00110139/miniforge3/envs/TF2/lib/python3.9/site-packages/seaborn/categorical.py:3399: UserWarning: 81.2% of the points cannot be placed; you may want to decrease the size of the markers or use stripplot.\n  warnings.warn(msg, UserWarning)\n/Users/00110139/miniforge3/envs/TF2/lib/python3.9/site-packages/seaborn/categorical.py:3399: UserWarning: 60.8% of the points cannot be placed; you may want to decrease the size of the markers or use stripplot.\n  warnings.warn(msg, UserWarning)\n/Users/00110139/miniforge3/envs/TF2/lib/python3.9/site-packages/seaborn/categorical.py:3399: UserWarning: 65.8% of the points cannot be placed; you may want to decrease the size of the markers or use stripplot.\n  warnings.warn(msg, UserWarning)\n/Users/00110139/miniforge3/envs/TF2/lib/python3.9/site-packages/seaborn/categorical.py:3399: UserWarning: 86.8% of the points cannot be placed; you may want to decrease the size of the markers or use stripplot.\n  warnings.warn(msg, UserWarning)\n/Users/00110139/miniforge3/envs/TF2/lib/python3.9/site-packages/seaborn/categorical.py:3399: UserWarning: 85.9% of the points cannot be placed; you may want to decrease the size of the markers or use stripplot.\n  warnings.warn(msg, UserWarning)\n/Users/00110139/miniforge3/envs/TF2/lib/python3.9/site-packages/seaborn/categorical.py:3399: UserWarning: 70.4% of the points cannot be placed; you may want to decrease the size of the markers or use stripplot.\n  warnings.warn(msg, UserWarning)\n/Users/00110139/miniforge3/envs/TF2/lib/python3.9/site-packages/seaborn/categorical.py:3399: UserWarning: 91.1% of the points cannot be placed; you may want to decrease the size of the markers or use stripplot.\n  warnings.warn(msg, UserWarning)\n/Users/00110139/miniforge3/envs/TF2/lib/python3.9/site-packages/seaborn/categorical.py:3399: UserWarning: 82.6% of the points cannot be placed; you may want to decrease the size of the markers or use stripplot.\n  warnings.warn(msg, UserWarning)\n/Users/00110139/miniforge3/envs/TF2/lib/python3.9/site-packages/seaborn/categorical.py:3399: UserWarning: 83.1% of the points cannot be placed; you may want to decrease the size of the markers or use stripplot.\n  warnings.warn(msg, UserWarning)\n/Users/00110139/miniforge3/envs/TF2/lib/python3.9/site-packages/seaborn/categorical.py:3399: UserWarning: 81.4% of the points cannot be placed; you may want to decrease the size of the markers or use stripplot.\n  warnings.warn(msg, UserWarning)\n/Users/00110139/miniforge3/envs/TF2/lib/python3.9/site-packages/seaborn/categorical.py:3399: UserWarning: 61.2% of the points cannot be placed; you may want to decrease the size of the markers or use stripplot.\n  warnings.warn(msg, UserWarning)\n/Users/00110139/miniforge3/envs/TF2/lib/python3.9/site-packages/seaborn/categorical.py:3399: UserWarning: 66.4% of the points cannot be placed; you may want to decrease the size of the markers or use stripplot.\n  warnings.warn(msg, UserWarning)\n/Users/00110139/miniforge3/envs/TF2/lib/python3.9/site-packages/seaborn/categorical.py:3399: UserWarning: 87.1% of the points cannot be placed; you may want to decrease the size of the markers or use stripplot.\n  warnings.warn(msg, UserWarning)",
    "crumbs": [
      "Intermediate Data Visualization with Seaborn"
    ]
  },
  {
    "objectID": "10_Intermediate_Data_Visualization_with_Seaborn.html#boxplots-violinplots-and-boxenplots",
    "href": "10_Intermediate_Data_Visualization_with_Seaborn.html#boxplots-violinplots-and-boxenplots",
    "title": "Intermediate Data Visualization with Seaborn",
    "section": "boxplots, violinplots and boxenplots",
    "text": "boxplots, violinplots and boxenplots\nSeaborn’s categorical plots also support several abstract representations of data. The API for each of these is the same so it is very convenient to try each plot and see if the data lends itself to one over the other.\nIn this exercise, we will use the color palette options presented in Chapter 2 to show how colors can easily be included in the plots.\n\n\n\n\n\n\nInstructions\n\n\n\n\nCreate and display a boxplot of the data with Award_Amount on the x axis and Model Selected on the y axis.\nUse Award_Amount on the x axis and Model Selected on the y axis. - Create and display an boxenplot using the Paired palette and the Region column as the hue.\n\n\n\n\n# Read in the DataFrame\ndf_grant = pd.read_csv(\"datasets/schoolimprovement2010grants.csv\")\n# Create a boxplot\nsns.boxplot(data=df_grant,\n         x='Award_Amount',\n         y='Model Selected')\n\nplt.show()\nplt.clf()\n\n# Create a violinplot with the husl palette\nsns.violinplot(data=df_grant,\n         x='Award_Amount',\n         y='Model Selected',\n         palette='husl')\n\nplt.show()\nplt.clf()\n\n# Create a boxenplot with the Paired palette and the Region column as the hue\nsns.boxenplot(data=df_grant,\n         x='Award_Amount',\n         y='Model Selected',\n         palette='Paired',\n         hue='Region')\n\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n/var/folders/53/yp3kynfd7rn5y13c2wwfm33rmgtrfb/T/ipykernel_55122/1096742578.py:12: FutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `y` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.violinplot(data=df_grant,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;",
    "crumbs": [
      "Intermediate Data Visualization with Seaborn"
    ]
  },
  {
    "objectID": "10_Intermediate_Data_Visualization_with_Seaborn.html#barplots-pointplots-and-countplots",
    "href": "10_Intermediate_Data_Visualization_with_Seaborn.html#barplots-pointplots-and-countplots",
    "title": "Intermediate Data Visualization with Seaborn",
    "section": "barplots, pointplots and countplots",
    "text": "barplots, pointplots and countplots\nThe final group of categorical plots are barplots, pointplots and countplot which create statistical summaries of the data. The plots follow a similar API as the other plots and allow further customization for the specific problem at hand.\n\n\n\n\n\n\nInstructions\n\n\n\n\nCreate a countplot with the df dataframe and Model Selected on the y axis and the color varying by Region. - Create a pointplot with the df dataframe and Model Selected on the x-axis and Award_Amount on the y-axis. Use a capsize in the pointplot in order to add caps to the error bars. - Create a barplot with the same data on the x and y axis and change the color of each bar based on the Region column.\n\n\n\n\n'''\n# Show a countplot with the number of models used with each region a different color\nsns.countplot(data=df,\n         y=\"Model Selected\",\n         hue=\"Region\")\n\nplt.show()\nplt.clf()\n\n# Create a pointplot and include the capsize in order to show caps on the error bars\nsns.pointplot(data=df,\n         y='Award_Amount',\n         x='Model Selected',\n         capsize=.1)\n\nplt.show()\nplt.clf()\n\n# Create a barplot with each Region shown as a different color\nsns.barplot(data=df,\n         y='Award_Amount',\n         x='Model Selected',\n         hue='Region')\n\nplt.show()\nplt.clf()\n'''\n\n'\\n# Show a countplot with the number of models used with each region a different color\\nsns.countplot(data=df,\\n         y=\"Model Selected\",\\n         hue=\"Region\")\\n\\nplt.show()\\nplt.clf()\\n\\n# Create a pointplot and include the capsize in order to show caps on the error bars\\nsns.pointplot(data=df,\\n         y=\\'Award_Amount\\',\\n         x=\\'Model Selected\\',\\n         capsize=.1)\\n\\nplt.show()\\nplt.clf()\\n\\n# Create a barplot with each Region shown as a different color\\nsns.barplot(data=df,\\n         y=\\'Award_Amount\\',\\n         x=\\'Model Selected\\',\\n         hue=\\'Region\\')\\n\\nplt.show()\\nplt.clf()\\n'",
    "crumbs": [
      "Intermediate Data Visualization with Seaborn"
    ]
  },
  {
    "objectID": "10_Intermediate_Data_Visualization_with_Seaborn.html#regression-and-residual-plots",
    "href": "10_Intermediate_Data_Visualization_with_Seaborn.html#regression-and-residual-plots",
    "title": "Intermediate Data Visualization with Seaborn",
    "section": "Regression and residual plots",
    "text": "Regression and residual plots\nLinear regression is a useful tool for understanding the relationship between numerical variables. Seaborn has simple but powerful tools for examining these relationships.\nFor these exercises, we will look at some details from the US Department of Education on 4 year college tuition information and see if there are any interesting insights into which variables might help predict tuition costs.\nFor these exercises, all data is loaded in the df variable.\n\n\n\n\n\n\nInstructions\n\n\n\n\nPlot a regression plot comparing Tuition and average SAT scores(SAT_AVG_ALL). Make sure the values are shown as green triangles. - Use a residual plot to determine if the relationship looks linear.\n\n\n\n\ndf = college_data\ndf.head(3)\n\n\n\n\n\n\n\n\n\nINSTNM\nOPEID\nREGION\nSAT_AVG_ALL\nPCTPELL\nPCTFLOAN\nADM_RATE_ALL\nUG\nAVGFACSAL\nCOMPL_RPY_5YR_RT\n...\nCONTROL\nWOMENONLY\nMENONLY\nLOCALE\nTuition\nDegree_Type\nOwnership\nRegions\nLocales\nLocale_Short\n\n\n\n\n0\nAlabama A & M University\n100200\n5\n850.0\n0.7249\n0.8159\n0.653841\n4380.0\n7017.0\n0.477631579\n...\n1\n0.0\n0.0\n12.0\n13435.0\nGraduate\nPublic\nSouth East\nCity: Midsize\nCity\n\n\n1\nUniversity of Alabama at Birmingham\n105200\n5\n1147.0\n0.3505\n0.5218\n0.604275\n10331.0\n10221.0\n0.673230442\n...\n1\n0.0\n0.0\n12.0\n16023.0\nGraduate\nPublic\nSouth East\nCity: Midsize\nCity\n\n\n2\nAmridge University\n2503400\n5\nNaN\n0.7455\n0.8781\nNaN\n98.0\n3217.0\n0.636363636\n...\n2\n0.0\n0.0\n12.0\n8862.0\nGraduate\nPrivate non-profit\nSouth East\nCity: Midsize\nCity\n\n\n\n\n3 rows × 24 columns\n\n\n\n\n\n# Display a regression plot for Tuition\nsns.regplot(data=df,\n         y='Tuition',\n         x='SAT_AVG_ALL',\n         marker='^',\n         color='g')\n\nplt.show()\nplt.clf()\n# Display the residual plot\nsns.residplot(data=df,\n          y='Tuition',\n          x='SAT_AVG_ALL',\n          color='g')\n\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;",
    "crumbs": [
      "Intermediate Data Visualization with Seaborn"
    ]
  },
  {
    "objectID": "10_Intermediate_Data_Visualization_with_Seaborn.html#regression-plot-parameters",
    "href": "10_Intermediate_Data_Visualization_with_Seaborn.html#regression-plot-parameters",
    "title": "Intermediate Data Visualization with Seaborn",
    "section": "Regression plot parameters",
    "text": "Regression plot parameters\nSeaborn’s regression plot supports several parameters that can be used to configure the plots and drive more insight into the data.\nFor the next exercise, we can look at the relationship between tuition and the percent of students that receive Pell grants. A Pell grant is based on student financial need and subsidized by the US Government. In this data set, each University has some percentage of students that receive these grants. Since this data is continuous, using x_bins can be useful to break the percentages into categories in order to summarize and understand the data.\n\n\n\n\n\n\nInstructions\n\n\n\n\nPlot a regression plot of Tuition and PCTPELL. - Create another plot that breaks the PCTPELL column into 5 different bins. -\n\n\n\n\n# Plot a regression plot of Tuition and the Percentage of Pell Grants\nsns.regplot(data=df,\n            y='Tuition',\n            x='PCTPELL')\n\nplt.show()\nplt.clf()\n\n# Create another plot that estimates the tuition by PCTPELL\nsns.regplot(data=df,\n            y='Tuition',\n            x='PCTPELL',\n            x_bins=5)\n\nplt.show()\nplt.clf()\n\n# The final plot should include a line using a 2nd order polynomial\nsns.regplot(data=df,\n            y='Tuition',\n            x='PCTPELL',\n            x_bins=5,\n            order=2)\n\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;",
    "crumbs": [
      "Intermediate Data Visualization with Seaborn"
    ]
  },
  {
    "objectID": "10_Intermediate_Data_Visualization_with_Seaborn.html#binning-data",
    "href": "10_Intermediate_Data_Visualization_with_Seaborn.html#binning-data",
    "title": "Intermediate Data Visualization with Seaborn",
    "section": "Binning data",
    "text": "Binning data\nWhen the data on the x axis is a continuous value, it can be useful to break it into different bins in order to get a better visualization of the changes in the data.\nFor this exercise, we will look at the relationship between tuition and the Undergraduate population abbreviated as UG in this data. We will start by looking at a scatter plot of the data and examining the impact of different bin sizes on the visualization.\n\n\n\n\n\n\nInstructions\n\n\n\n\nCreate a regplot of Tuition and UG and set the fit_reg parameter to False to disable the regression line. - Create another plot with the UG data divided into 5 bins. - Create a regplot() with the data divided into 8 bins.\n\n\n\n\n# Create a scatter plot by disabling the regression line\nsns.regplot(data=df,\n            y='Tuition',\n            x='UG',\n            fit_reg=False)\n\nplt.show()\nplt.clf()\n# Create a scatter plot and bin the data into 5 bins\nsns.regplot(data=df,\n            y='Tuition',\n            x='UG',\n            x_bins=5)\n\nplt.show()\nplt.clf()\n\n# Create a regplot and bin the data into 8 bins\nsns.regplot(data=df,\n         y='Tuition',\n         x='UG',\n         x_bins=8)\n\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;",
    "crumbs": [
      "Intermediate Data Visualization with Seaborn"
    ]
  },
  {
    "objectID": "10_Intermediate_Data_Visualization_with_Seaborn.html#creating-heatmaps",
    "href": "10_Intermediate_Data_Visualization_with_Seaborn.html#creating-heatmaps",
    "title": "Intermediate Data Visualization with Seaborn",
    "section": "Creating heatmaps",
    "text": "Creating heatmaps\nA heatmap is a common matrix plot that can be used to graphically summarize the relationship between two variables. For this exercise, we will start by looking at guests of the Daily Show from 1999 - 2015 and see how the occupations of the guests have changed over time.\nThe data includes the date of each guest appearance as well as their occupation. For the first exercise, we need to get the data into the right format for Seaborn’s heatmap function to correctly plot the data. All of the data has already been read into the df variable.\n\n\n\n\n\n\nInstructions\n\n\n\n\nUse pandas’ crosstab() function to build a table of visits by Group and Year. - Print the pd_crosstab DataFrame. - Plot the data using Seaborn’s heatmap().\n\n\n\n\ndf=daily_show\n# Create a crosstab table of the data\npd_crosstab = pd.crosstab(df[\"Group\"], df[\"YEAR\"])\nprint(pd_crosstab)\n\n# Plot a heatmap of the table\nsns.heatmap(pd_crosstab)\n\n# Rotate tick marks for visibility\nplt.yticks(rotation=0)\nplt.xticks(rotation=90)\n\nplt.show()\n\nYEAR            1999  2000  2001  2002  2003  2004  2005  2006  2007  2008  \\\nGroup                                                                        \nAcademic           0     0     2     0     4     1    12     9    13     5   \nActing           108   100    92    84    74    51    44    44    25    26   \nAdvocacy           0     1     0     1     0     4     0     0     2     3   \nAthletics          0     3     1     2     0     2     2     5     4     1   \nBusiness           0     1     0     0     0     2     1     1     2     1   \nClergy             0     0     0     1     1     1     0     0     1     0   \nComedy            25    12    11     5    12     7     5     8     9     7   \nConsultant         0     0     0     0     1     4     1     4     2     3   \nGovernment         0     0     2     1     2     3     1     3     1     0   \nMedia             11    21    31    42    41    45    54    47    47    77   \nMilitary           0     0     0     0     0     0     1     1     3     1   \nMisc               0     0     2     1     1     0     4     3     2     2   \nMusician          17    13    11    10     7     5    11     6     2     1   \nPolitical Aide     0     1     1     2     1     2     3     3     2     6   \nPolitician         2    13     3     8    14    32    22    25    21    27   \nScience            0     0     0     0     1     2     1     1     4     1   \n\nYEAR            2009  2010  2011  2012  2013  2014  2015  \nGroup                                                     \nAcademic          11     8    10     8     8    10     2  \nActing            22    45    42    33    60    47    33  \nAdvocacy           1     1     1     2     2     3     3  \nAthletics          7     5     2     7     4     4     3  \nBusiness           4     2     3     3     3     1     1  \nClergy             1     0     1     2     0     0     0  \nComedy             7     7     7     6     6     9     7  \nConsultant         2     1     0     0     0     0     0  \nGovernment         5     3     3     3     7     6     0  \nMedia             59    50    51    52    51    53    24  \nMilitary           1     2     3     1     1     1     1  \nMisc               5     4     5     6     2     5     3  \nMusician           5     6     6     5     5     8     5  \nPolitical Aide     3     2     1     1     3     2     3  \nPolitician        26    25    23    29    11    13    14  \nScience            4     3     5     2     2     1     1",
    "crumbs": [
      "Intermediate Data Visualization with Seaborn"
    ]
  },
  {
    "objectID": "10_Intermediate_Data_Visualization_with_Seaborn.html#customizing-heatmaps",
    "href": "10_Intermediate_Data_Visualization_with_Seaborn.html#customizing-heatmaps",
    "title": "Intermediate Data Visualization with Seaborn",
    "section": "Customizing heatmaps",
    "text": "Customizing heatmaps\nSeaborn supports several types of additional customizations to improve the output of a heatmap. For this exercise, we will continue to use the Daily Show data that is stored in the df variable but we will customize the output.\n\n\n\n\n\n\nInstructions\n\n\n\n\nCreate a crosstab table of Group and YEAR - Create a heatmap of the data using the BuGn palette - Disable the cbar and increase the linewidth to 0.3\n\n\n\n\n# Create the crosstab DataFrame\npd_crosstab = pd.crosstab(df[\"Group\"], df[\"YEAR\"])\n\n# Plot a heatmap of the table with no color bar and using the BuGn palette\nsns.heatmap(pd_crosstab, cbar=False, cmap=\"BuGn\", linewidths=0.3)\n\n# Rotate tick marks for visibility\nplt.yticks(rotation=0)\nplt.xticks(rotation=90)\n\n#Show the plot\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;",
    "crumbs": [
      "Intermediate Data Visualization with Seaborn"
    ]
  },
  {
    "objectID": "10_Intermediate_Data_Visualization_with_Seaborn.html#building-a-facetgrid",
    "href": "10_Intermediate_Data_Visualization_with_Seaborn.html#building-a-facetgrid",
    "title": "Intermediate Data Visualization with Seaborn",
    "section": "Building a FacetGrid",
    "text": "Building a FacetGrid\nSeaborn’s FacetGrid is the foundation for building data-aware grids. A data-aware grid allows you to create a series of small plots that can be useful for understanding complex data relationships.\nFor these exercises, we will continue to look at the College Scorecard Data from the US Department of Education. This rich dataset has many interesting data elements that we can plot with Seaborn.\nWhen building a FacetGrid, there are two steps:\nCreate a FacetGrid object with columns, rows, or hue.\nMap individual plots to the grid.\n\nInstructions\n\nCreate a FacetGrid that shows a point plot of the Average SAT scores SAT_AVG_ALL.\nUse row_order to control the display order of the degree types.\n\n\ndf=college_data\n# Create FacetGrid with Degree_Type and specify the order of the rows using row_order\ng2 = sns.FacetGrid(df, \n             row=\"Degree_Type\",\n             row_order=['Graduate', 'Bachelors', 'Associates', 'Certificate'])\n\n# Map a pointplot of SAT_AVG_ALL onto the grid\ng2.map(sns.pointplot, 'SAT_AVG_ALL')\n\n# Show the plot\nplt.show()\nplt.clf()\n\n/Users/00110139/miniforge3/envs/TF2/lib/python3.9/site-packages/seaborn/axisgrid.py:718: UserWarning: Using the pointplot function without specifying `order` is likely to produce an incorrect plot.\n  warnings.warn(warning)\n\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;",
    "crumbs": [
      "Intermediate Data Visualization with Seaborn"
    ]
  },
  {
    "objectID": "10_Intermediate_Data_Visualization_with_Seaborn.html#using-a-catplot",
    "href": "10_Intermediate_Data_Visualization_with_Seaborn.html#using-a-catplot",
    "title": "Intermediate Data Visualization with Seaborn",
    "section": "Using a catplot",
    "text": "Using a catplot\nIn many cases, Seaborn’s catplot() can be a simpler way to create a FacetGrid. Instead of creating a grid and mapping the plot, we can use the catplot() to create a plot with one line of code.\nFor this exercise, we will recreate one of the plots from the previous exercise using catplot() and show how to create a boxplot on a data-aware grid. Instructions - Create a catplot() that contains a boxplot (box) of Tuition values varying by Degree_Type across rows. - Create a catplot() of SAT Averages (SAT_AVG_ALL) facetted across Degree_Type that shows a pointplot (point). Use row_order to order the degrees from highest to lowest level.\n\n# Create a factor plot that contains boxplots of Tuition values\nsns.catplot(data=df,\n         x='Tuition',\n         kind='box',\n         row='Degree_Type')\n\nplt.show()\nplt.clf()\n\n\n# Create a facetted pointplot of Average SAT_AVG_ALL scores facetted by Degree Type \nsns.catplot(data=df,\n        x='SAT_AVG_ALL',\n        kind='point',\n        row='Degree_Type',\n        row_order=['Graduate', 'Bachelors', 'Associates', 'Certificate'])\n\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;",
    "crumbs": [
      "Intermediate Data Visualization with Seaborn"
    ]
  },
  {
    "objectID": "10_Intermediate_Data_Visualization_with_Seaborn.html#using-a-lmplot",
    "href": "10_Intermediate_Data_Visualization_with_Seaborn.html#using-a-lmplot",
    "title": "Intermediate Data Visualization with Seaborn",
    "section": "Using a lmplot",
    "text": "Using a lmplot\nThe lmplot is used to plot scatter plots with regression lines on FacetGrid objects. The API is similar to catplot with the difference that the default behavior of lmplot is to plot regression lines.\nFor the first set of exercises, we will look at the Undergraduate population (UG) and compare it to the percentage of students receiving Pell Grants (PCTPELL).\nFor the second lmplot exercise, we can look at the relationships between Average SAT scores and Tuition across the different degree types and public vs. non-profit schools.\n\n\n\n\n\n\nInstructions\n\n\n\n\nCreate a FacetGrid() with Degree_Type columns and scatter plot of UG and PCTPELL. - Create a lmplot() using the same values from the FacetGrid(). - Create a facetted lmplot() comparing SAT_AVG_ALL to Tuition with columns varying by Ownership and rows by Degree_Type. In the lmplot() add a hue for Women Only Universities.\n\n\n\n\ndf.columns\n\nIndex(['INSTNM', 'OPEID', 'REGION', 'SAT_AVG_ALL', 'PCTPELL', 'PCTFLOAN',\n       'ADM_RATE_ALL', 'UG', 'AVGFACSAL', 'COMPL_RPY_5YR_RT', 'DEBT_MDN',\n       'MEDIAN_HH_INC', 'ICLEVEL', 'HIGHDEG', 'CONTROL', 'WOMENONLY',\n       'MENONLY', 'LOCALE', 'Tuition', 'Degree_Type', 'Ownership', 'Regions',\n       'Locales', 'Locale_Short'],\n      dtype='object')\n\n\n\ndf = college_data\ndegree_ord =['Graduate', 'Bachelors', 'Associates']\n# Create a FacetGrid varying by column and columns ordered with the degree_order variable\ng = sns.FacetGrid(df, col=\"Degree_Type\", col_order=degree_ord)\n\n# Map a scatter plot of Undergrad Population compared to PCTPELL\ng.map(plt.scatter, 'UG', 'PCTPELL')\n\nplt.show()\nplt.clf()\n# Re-create the previous plot as an lmplot\nsns.lmplot(data=df,\n        x='UG',\n        y='PCTPELL',\n        col=\"Degree_Type\",\n        col_order=degree_ord)\n\nplt.show()\nplt.clf()\ninst_ord = ['Public', 'Private non-profit']\n# Create an lmplot that has a column for Ownership, a row for Degree_Type and hue based on the WOMENONLY column\nsns.lmplot(data=df,\n        x='SAT_AVG_ALL',\n        y='Tuition',\n        col=\"Ownership\",\n        row='Degree_Type',\n        row_order=['Graduate', 'Bachelors'],\n        hue='WOMENONLY',\n        col_order=inst_ord)\n\nplt.show()\nplt.clf()\n\n# Create an lmplot that has a column for Ownership, a row for Degree_Type and hue based on the WOMENONLY column\nsns.lmplot(data=df,\n        x='SAT_AVG_ALL',\n        y='Tuition',\n        col=\"Ownership\",\n        row='Degree_Type',\n        row_order=['Graduate', 'Bachelors'],\n        hue='WOMENONLY',\n        col_order=inst_ord)\n\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;",
    "crumbs": [
      "Intermediate Data Visualization with Seaborn"
    ]
  },
  {
    "objectID": "10_Intermediate_Data_Visualization_with_Seaborn.html#building-a-pairgrid",
    "href": "10_Intermediate_Data_Visualization_with_Seaborn.html#building-a-pairgrid",
    "title": "Intermediate Data Visualization with Seaborn",
    "section": "Building a PairGrid",
    "text": "Building a PairGrid\nWhen exploring a dataset, one of the earliest tasks is exploring the relationship between pairs of variables. This step is normally a precursor to additional investigation.\nSeaborn supports this pair-wise analysis using the PairGrid. In this exercise, we will look at the Car Insurance Premium data we analyzed in Chapter 1. All data is available in the df variable.\n\n\n\n\n\n\nInstructions\n\n\n\n\nCompare “fatal_collisions” to “premiums” by using a scatter plot mapped to a PairGrid(). - Create another PairGrid but plot a histogram on the diagonal and scatter plot on the off diagonal.\n\n\n\n\ndf=insurance\n# Create a PairGrid with a scatter plot for fatal_collisions and premiums\ng = sns.PairGrid(df, vars=[\"fatal_collisions\", \"premiums\"])\ng2 = g.map(sns.scatterplot)\n\nplt.show()\nplt.clf()\n\n# Create the same PairGrid but map a histogram on the diag\ng = sns.PairGrid(df, vars=[\"fatal_collisions\", \"premiums\"])\ng2 = g.map_diag(sns.histplot)\ng3 = g2.map_offdiag(sns.scatterplot)\n\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;",
    "crumbs": [
      "Intermediate Data Visualization with Seaborn"
    ]
  },
  {
    "objectID": "10_Intermediate_Data_Visualization_with_Seaborn.html#using-a-pairplot",
    "href": "10_Intermediate_Data_Visualization_with_Seaborn.html#using-a-pairplot",
    "title": "Intermediate Data Visualization with Seaborn",
    "section": "Using a pairplot",
    "text": "Using a pairplot\nThe pairplot() function is generally a more convenient way to look at pairwise relationships. In this exercise, we will create the same results as the PairGrid using less code. Then, we will explore some additional functionality of the pairplot(). We will also use a different palette and adjust the transparency of the diagonal plots using the alpha parameter.\n\n\n\n\n\n\nInstructions\n\n\n\n\nRecreate the pairwise plot from the previous exercise using pairplot(). - Create another pairplot using the “Region” to color code the results.Use the RdBu palette to change the colors of the plot.\n\n\n\n\n #Create a pairwise plot of the variables using a scatter plot\nsns.pairplot(data=df,\n        vars=[\"fatal_collisions\", \"premiums\"],\n        kind='scatter')\n\nplt.show()\nplt.clf()\n\n# Plot the same data but use a different color palette and color code by Region\nsns.pairplot(data=df,\n        vars=[\"fatal_collisions\", \"premiums\"],\n        kind='scatter',\n        hue='Region',\n        palette='RdBu',\n        diag_kws={'alpha':.5})\n\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;",
    "crumbs": [
      "Intermediate Data Visualization with Seaborn"
    ]
  },
  {
    "objectID": "10_Intermediate_Data_Visualization_with_Seaborn.html#additional-pairplots",
    "href": "10_Intermediate_Data_Visualization_with_Seaborn.html#additional-pairplots",
    "title": "Intermediate Data Visualization with Seaborn",
    "section": "Additional pairplots",
    "text": "Additional pairplots\nThis exercise will go through a couple of more examples of how the pairplot() can be customized for quickly analyzing data and determining areas of interest that might be worthy of additional analysis.\nOne area of customization that is useful is to explicitly define the x_vars and y_vars that you wish to examine. Instead of examining all pairwise relationships, this capability allows you to look only at the specific interactions that may be of interest.\nWe have already looked at using kind to control the types of plots. We can also use diag_kind to control the types of plots shown on the diagonals. In the final example, we will include a regression and kde plot in the pairplot.\n\n\n\n\n\n\nInstructions\n\n\n\n\nCreate a pair plot that examines fatal_collisions_speeding and fatal_collisions_alc on the x axis and premiums and insurance_losses on the y axis. - Use the husl palette and color code the scatter plot by Region. - Build a pairplot() with kde plots along the diagonals. Include the insurance_losses and premiums as the variables. - Use a reg plot for the the non-diagonal plots. - Use the BrBG palette for the final plot.\n\n\n\n\n# Build a pairplot with different x and y variables\nsns.pairplot(data=df,\n        x_vars=[\"fatal_collisions_speeding\", \"fatal_collisions_alc\"],\n        y_vars=['premiums', 'insurance_losses'],\n        kind='scatter',\n        hue='Region',\n        palette='husl')\n\nplt.show()\nplt.clf()\n\n# plot relationships between insurance_losses and premiums\nsns.pairplot(data=df,\n             vars=[\"insurance_losses\", \"premiums\"],\n             kind='reg',\n             palette='BrBG',\n             diag_kind = 'kde',\n             hue='Region')\n\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;",
    "crumbs": [
      "Intermediate Data Visualization with Seaborn"
    ]
  },
  {
    "objectID": "10_Intermediate_Data_Visualization_with_Seaborn.html#building-a-jointgrid-and-jointplot",
    "href": "10_Intermediate_Data_Visualization_with_Seaborn.html#building-a-jointgrid-and-jointplot",
    "title": "Intermediate Data Visualization with Seaborn",
    "section": "Building a JointGrid and jointplot",
    "text": "Building a JointGrid and jointplot\nSeaborn’s JointGrid combines univariate plots such as histograms, rug plots and kde plots with bivariate plots such as scatter and regression plots. The process for creating these plots should be familiar to you now. These plots also demonstrate how Seaborn provides convenient functions to combine multiple plots together.\nFor these exercises, we will use the bike share data that we reviewed earlier. In this exercise, we will look at the relationship between humidity levels and total rentals to see if there is an interesting relationship we might want to explore later.\n\n\n\n\n\n\nInstructions\n\n\n\n\nUse Seaborn’s “whitegrid” style for these plots. - Create a JointGrid() with “hum” on the x-axis and “total_rentals” on the y. - Plot a regplot() and histplot() on the margins. - Re-create the plot using a jointplot().\n\n\n\n\ndf=bike_share\n# Build a JointGrid comparing humidity and total_rentals\nsns.set_style(\"whitegrid\")\ng = sns.JointGrid(x=\"hum\",\n            y=\"total_rentals\",\n            data=df,\n            xlim=(0.1, 1.0)) \n\ng.plot(sns.regplot, sns.histplot)\n\nplt.show()\nplt.clf()\n# Create a jointplot similar to the JointGrid \nsns.jointplot(x=\"hum\",\n        y=\"total_rentals\",\n        kind='reg',\n        data=df)\n\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;",
    "crumbs": [
      "Intermediate Data Visualization with Seaborn"
    ]
  },
  {
    "objectID": "10_Intermediate_Data_Visualization_with_Seaborn.html#jointplots-and-regression",
    "href": "10_Intermediate_Data_Visualization_with_Seaborn.html#jointplots-and-regression",
    "title": "Intermediate Data Visualization with Seaborn",
    "section": "Jointplots and regression",
    "text": "Jointplots and regression\nSince the previous plot does not show a relationship between humidity and rental amounts, we can look at another variable that we reviewed earlier. Specifically, the relationship between temp and total_rentals.\n\n\n\n\n\n\nInstructions\n\n\n\n\nCreate a jointplot with a 2nd order polynomial regression plot comparing temp and total_rentals.\n\n\n\n\n# Plot temp vs. total_rentals as a regression plot\nsns.jointplot(x=\"temp\",\n         y=\"total_rentals\",\n         kind='reg',\n         data=df,\n         order=2,\n         xlim=(0, 1))\n\nplt.show()\nplt.clf()\n\n# Plot a jointplot showing the residuals\nsns.jointplot(x=\"temp\",\n        y=\"total_rentals\",\n        kind='resid',\n        data=df,\n        order=2)\n\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;",
    "crumbs": [
      "Intermediate Data Visualization with Seaborn"
    ]
  },
  {
    "objectID": "10_Intermediate_Data_Visualization_with_Seaborn.html#complex-jointplots",
    "href": "10_Intermediate_Data_Visualization_with_Seaborn.html#complex-jointplots",
    "title": "Intermediate Data Visualization with Seaborn",
    "section": "Complex jointplots",
    "text": "Complex jointplots\nThe jointplot is a convenience wrapper around many of the JointGrid functions. However, it is possible to overlay some of the JointGrid plots on top of the standard jointplot. In this example, we can look at the different distributions for riders that are considered casual versus those that are registered.\n\n\n\n\n\n\nInstructions\n\n\n\n\nCreate a jointplot with a scatter plot comparing temp and casual riders. - Overlay a kdeplot on top of the scatter plot. - Build a similar plot for registered users.\n\n\n\n\n# Create a jointplot of temp vs. casual riders\n# Include a kdeplot over the scatter plot\ng = sns.jointplot(x=\"temp\",\n             y=\"casual\",\n             kind='scatter',\n             data=df,\n             marginal_kws=dict(bins=10))\ng.plot_joint(sns.kdeplot)\n    \nplt.show()\nplt.clf()\n\n# Replicate the above plot but only for registered riders\ng = sns.jointplot(x=\"temp\",\n             y=\"registered\",\n             kind='scatter',\n             data=df,\n             marginal_kws=dict(bins=10))\ng.plot_joint(sns.kdeplot)\n\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;",
    "crumbs": [
      "Intermediate Data Visualization with Seaborn"
    ]
  },
  {
    "objectID": "10_Intermediate_Data_Visualization_with_Seaborn.html#bee-swarm-plot-example",
    "href": "10_Intermediate_Data_Visualization_with_Seaborn.html#bee-swarm-plot-example",
    "title": "Intermediate Data Visualization with Seaborn",
    "section": "Bee swarm plot example",
    "text": "Bee swarm plot example\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Sample data (replace this with your own dataset)\ndata = sns.load_dataset(\"iris\")\n\n# Create a bee swarm plot using Seaborn\nsns.set(style=\"whitegrid\")  # Set the style\n\n# Replace 'species' with the column name you want to plot\nsns.swarmplot(x=\"species\", y=\"sepal_length\", data=data)\n\n# Set plot labels and title\nplt.xlabel(\"Species\")\nplt.ylabel(\"Sepal Length\")\nplt.title(\"Bee Swarm Plot of Sepal Length by Species\")\n\n# Show the plot\nplt.show()",
    "crumbs": [
      "Intermediate Data Visualization with Seaborn"
    ]
  },
  {
    "objectID": "10_Intermediate_Data_Visualization_with_Seaborn.html#plots-of-each-observation---stripplot-1",
    "href": "10_Intermediate_Data_Visualization_with_Seaborn.html#plots-of-each-observation---stripplot-1",
    "title": "Intermediate Data Visualization with Seaborn",
    "section": "Plots of each observation - stripplot",
    "text": "Plots of each observation - stripplot\n\ndf=insurance\ndf.head()\n\n\n\n\n\n\n\n\n\nState\nfatal_collisions\nfatal_collisions_speeding\nfatal_collisions_alc\nfatal_collisions_not_distracted\nfatal_collisions_no_hist\npremiums\ninsurance_losses\nRegion\n\n\n\n\n0\nAlabama\n18.8\n39\n30\n96\n80\n784.55\n145.08\nSouth\n\n\n1\nAlaska\n18.1\n41\n25\n90\n94\n1053.48\n133.93\nWest\n\n\n2\nArizona\n18.6\n35\n28\n84\n96\n899.47\n110.35\nWest\n\n\n3\nArkansas\n22.4\n18\n26\n94\n95\n827.34\n142.39\nSouth\n\n\n4\nCalifornia\n12.0\n35\n28\n91\n89\n878.41\n165.63\nWest\n\n\n\n\n\n\n\n\n\nsns.stripplot(data=df, y=\"Region\", x=\"insurance_losses\", jitter=True)",
    "crumbs": [
      "Intermediate Data Visualization with Seaborn"
    ]
  },
  {
    "objectID": "10_Intermediate_Data_Visualization_with_Seaborn.html#plots-of-each-observation---swarmplot-1",
    "href": "10_Intermediate_Data_Visualization_with_Seaborn.html#plots-of-each-observation---swarmplot-1",
    "title": "Intermediate Data Visualization with Seaborn",
    "section": "Plots of each observation - swarmplot",
    "text": "Plots of each observation - swarmplot\n\nsns.swarmplot(data=df, y=\"Region\", x=\"insurance_losses\")",
    "crumbs": [
      "Intermediate Data Visualization with Seaborn"
    ]
  },
  {
    "objectID": "10_Intermediate_Data_Visualization_with_Seaborn.html#abstract-representations---boxplot-1",
    "href": "10_Intermediate_Data_Visualization_with_Seaborn.html#abstract-representations---boxplot-1",
    "title": "Intermediate Data Visualization with Seaborn",
    "section": "Abstract representations - boxplot",
    "text": "Abstract representations - boxplot\n\nsns.boxplot(data=df, y=\"Region\", x=\"insurance_losses\")",
    "crumbs": [
      "Intermediate Data Visualization with Seaborn"
    ]
  },
  {
    "objectID": "10_Intermediate_Data_Visualization_with_Seaborn.html#abstract-representation---violinplot-1",
    "href": "10_Intermediate_Data_Visualization_with_Seaborn.html#abstract-representation---violinplot-1",
    "title": "Intermediate Data Visualization with Seaborn",
    "section": "Abstract representation - violinplot",
    "text": "Abstract representation - violinplot\n\nsns.violinplot(data=df, y=\"Region\", x=\"insurance_losses\")",
    "crumbs": [
      "Intermediate Data Visualization with Seaborn"
    ]
  },
  {
    "objectID": "10_Intermediate_Data_Visualization_with_Seaborn.html#abstract-representation---boxenplot-1",
    "href": "10_Intermediate_Data_Visualization_with_Seaborn.html#abstract-representation---boxenplot-1",
    "title": "Intermediate Data Visualization with Seaborn",
    "section": "Abstract representation - boxenplot",
    "text": "Abstract representation - boxenplot\n\nsns.boxenplot(data=df, y=\"Region\", x=\"insurance_losses\")",
    "crumbs": [
      "Intermediate Data Visualization with Seaborn"
    ]
  },
  {
    "objectID": "10_Intermediate_Data_Visualization_with_Seaborn.html#statistical-estimates---barplot-1",
    "href": "10_Intermediate_Data_Visualization_with_Seaborn.html#statistical-estimates---barplot-1",
    "title": "Intermediate Data Visualization with Seaborn",
    "section": "Statistical estimates - barplot",
    "text": "Statistical estimates - barplot\n\nsns.barplot(data=df, y=\"Region\", x=\"insurance_losses\")#,hue='State')",
    "crumbs": [
      "Intermediate Data Visualization with Seaborn"
    ]
  },
  {
    "objectID": "10_Intermediate_Data_Visualization_with_Seaborn.html#statistical-estimates---pointplot-1",
    "href": "10_Intermediate_Data_Visualization_with_Seaborn.html#statistical-estimates---pointplot-1",
    "title": "Intermediate Data Visualization with Seaborn",
    "section": "Statistical estimates - pointplot",
    "text": "Statistical estimates - pointplot\n\nsns.pointplot(data=df, y=\"Region\", x=\"insurance_losses\")#,hue='State')",
    "crumbs": [
      "Intermediate Data Visualization with Seaborn"
    ]
  }
]